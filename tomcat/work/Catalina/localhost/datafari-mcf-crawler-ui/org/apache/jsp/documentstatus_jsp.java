/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.40
 * Generated at: 2015-04-07 14:06:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.manifoldcf.core.interfaces.*;
import org.apache.manifoldcf.core.util.*;
import org.apache.manifoldcf.ui.i18n.*;
import org.apache.manifoldcf.agents.interfaces.*;
import org.apache.manifoldcf.crawler.interfaces.*;
import org.apache.manifoldcf.authorities.interfaces.*;
import java.util.*;

public final class documentstatus_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/WEB-INF/jsp/x.tld", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/adminHeaders.jsp", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/WEB-INF/jsp/c.tld", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/WEB-INF/jsp/sql.tld", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/WEB-INF/jsp/fmt.tld", Long.valueOf(1428407612000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 response.setHeader("Pragma","No-cache");
response.setDateHeader("Expires",0);
response.setHeader("Cache-Control", "no-cache");
response.setDateHeader("max-age", 0);
response.setContentType("text/html;charset=utf-8");

      out.write("\r\n");
      out.write("\r\n");


/* $Id: adminHeaders.jsp 1601529 2014-06-09 23:19:08Z kwright $ */

/**
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements. See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License. You may obtain a copy of the License at
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.manifoldcf.ui.beans.ThreadContext thread = null;
      thread = (org.apache.manifoldcf.ui.beans.ThreadContext) _jspx_page_context.getAttribute("thread", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (thread == null){
        thread = new org.apache.manifoldcf.ui.beans.ThreadContext();
        _jspx_page_context.setAttribute("thread", thread, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      org.apache.manifoldcf.ui.beans.AdminProfile adminprofile = null;
      synchronized (session) {
        adminprofile = (org.apache.manifoldcf.ui.beans.AdminProfile) _jspx_page_context.getAttribute("adminprofile", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (adminprofile == null){
          adminprofile = new org.apache.manifoldcf.ui.beans.AdminProfile();
          _jspx_page_context.setAttribute("adminprofile", adminprofile, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	if (adminprofile.getLoggedOn() == false)
	{
		response.sendRedirect("login.jsp");
		return;
	}

	IThreadContext threadContext = thread.getThreadContext();
	org.apache.manifoldcf.ui.multipart.MultipartWrapper variableContext = (org.apache.manifoldcf.ui.multipart.MultipartWrapper)threadContext.get("__WRAPPER__");
	if (variableContext == null)
	{
		variableContext = new org.apache.manifoldcf.ui.multipart.MultipartWrapper(request,adminprofile);
		threadContext.save("__WRAPPER__",variableContext);
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


/* $Id: documentstatus.jsp 1601529 2014-06-09 23:19:08Z kwright $ */

/**
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements. See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License. You may obtain a copy of the License at
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
boolean maintenanceUnderway = org.apache.manifoldcf.crawler.system.ManifoldCF.checkMaintenanceUnderway();


      out.write("\r\n");
      out.write("\r\n");
      out.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\r\n");
      out.write("\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("\t<link rel=\"StyleSheet\" href=\"style.css\" type=\"text/css\" media=\"screen\"/>\r\n");
      out.write("\t<title>\r\n");
      out.write("\t\t");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.ApacheManifoldCFDocumentStatus"));
      out.write("\r\n");
      out.write("\t</title>\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t<!--\r\n");
      out.write("\r\n");
      out.write("\tfunction Go()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (!isInteger(report.rowcount.value))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"documentstatus.EnterALegalNumberForRowsPerPage"));
      out.write("\");\r\n");
      out.write("\t\t\treport.rowcount.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (!isRegularExpression(report.statusidentifiermatch.value))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"documentstatus.IdentifierMatchMustBeAValidRegularExpression"));
      out.write("\");\r\n");
      out.write("\t\t\treport.statusidentifiermatch.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tdocument.report.op.value=\"Status\";\r\n");
      out.write("\t\tdocument.report.action = document.report.action + \"#MainButton\";\r\n");
      out.write("\t\tdocument.report.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction Continue()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (!isRegularExpression(report.statusidentifiermatch.value))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"documentstatus.IdentifierMatchMustBeAValidRegularExpression"));
      out.write("\");\r\n");
      out.write("\t\t\treport.statusidentifiermatch.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdocument.report.op.value=\"Continue\";\r\n");
      out.write("\t\tdocument.report.action = document.report.action + \"#MainButton\";\r\n");
      out.write("\t\tdocument.report.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction ColumnClick(colname)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tdocument.report.clickcolumn.value = colname;\r\n");
      out.write("\t\tGo();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction SetPosition(amt)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (amt < 0)\r\n");
      out.write("\t\t\tamt = 0;\r\n");
      out.write("\t\tdocument.report.startrow.value = amt;\r\n");
      out.write("\t\tGo();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction isRegularExpression(value)\r\n");
      out.write("\t{\r\n");
      out.write("\t\ttry\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar foo = \"teststring\";\r\n");
      out.write("                        foo.search(value.replace(/\\(\\?i\\)/,\"\"));\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tcatch (e)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction isInteger(value)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar anum=/(^\\d+$)/;\r\n");
      out.write("\t\treturn anum.test(value);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//-->\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body class=\"standardbody\">\r\n");
      out.write("\r\n");
      out.write("    <table class=\"page\">\r\n");
      out.write("      <tr><td colspan=\"2\" class=\"banner\">");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "banner.jsp", out, true);
      out.write("</td></tr>\r\n");
      out.write("      <tr><td class=\"navigation\">");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "navigation.jsp", out, true);
      out.write("</td>\r\n");
      out.write("       <td class=\"window\">\r\n");
      out.write("\t<p class=\"windowtitle\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentStatus"));
      out.write("</p>\r\n");

if (maintenanceUnderway == false)
{
	int k;

	// Read the document selection parameters.
	
	// The status report is connection based, so the connection has to be selected before anything else makes sense.
	String statusConnection = variableContext.getParameter("statusconnection");
	if (statusConnection == null)
		statusConnection = "";
	
	// Which jobs we care about also figure in the selection part of the query.  It is the user's responsibility to pick jobs
	// that are in desired states.
	String[] statusJobIdentifiers = variableContext.getParameterValues("statusjobs");
	if (statusJobIdentifiers == null)
		statusJobIdentifiers = new String[0];

	// We can select documents from the queue based on the earliest time they can be acted upon.  This is specified in
	// a delta in minutes offset from "now".  Empty means that we don't want to select on that criteria.
	String activeTimeOffsetMinutes = variableContext.getParameter("statusscheduleoffset");
	if (activeTimeOffsetMinutes == null)
		activeTimeOffsetMinutes = "";
	
	// There is a selection criteria also based on the document state; these are integers defined in IJobManager.
	String[] documentStateTypes;
	if (variableContext.getParameter("statusdocumentstates_posted") != null)
	{
		documentStateTypes = variableContext.getParameterValues("statusdocumentstates");
		if (documentStateTypes == null)
			documentStateTypes = new String[0];
	}
	else
		documentStateTypes = null;
	
	// There is a selection criteria based on the document status; these are also integers defined in IJobManager.
	String[] documentStatusTypes;
	if (variableContext.getParameter("statusdocumentstatuses_posted") != null)
	{
		documentStatusTypes = variableContext.getParameterValues("statusdocumentstatuses");
		if (documentStatusTypes == null)
			documentStatusTypes = new String[0];
	}
	else
		documentStatusTypes = null;

	// Match string for the document identifier
	String identifierMatch = variableContext.getParameter("statusidentifiermatch");
	if (identifierMatch == null)
		identifierMatch = "";

	// From the passed-in selection values, calculate the actual selection criteria that we'll use in the queries.
	IRepositoryConnectionManager connMgr = RepositoryConnectionManagerFactory.make(threadContext);
	IRepositoryConnection[] connList = connMgr.getAllConnections();
	
	IJobManager jobManager = JobManagerFactory.make(threadContext);

	// Repository connection name: This simply needs to be mapped to an eligible list of identifiers.
	IJobDescription[] eligibleList = null;
	HashMap selectedJobs = null;
	if (statusConnection.length() > 0)
	{
		eligibleList = jobManager.findJobsForConnection(statusConnection);
		selectedJobs = new HashMap();
		k = 0;
		while (k < statusJobIdentifiers.length)
		{
			Long identifier = new Long(statusJobIdentifiers[k++]);
			selectedJobs.put(identifier,identifier);
		}
	}
	
	// Time offset: Need to calculate the actual time in ms since epoch to use to query against the "checktime" field.
	// Note that the checktime field is actually nullable and will only have a value when the document is in certain states;
	// therefore, the query itself will only include checktime for those states where it makes sense.  An empty value
	// means "from the beginning of time", or is equivalent to time 0.
	long nowTime = 0L;
	if (activeTimeOffsetMinutes.length() > 0)
	{
		nowTime = System.currentTimeMillis() + (new Long(activeTimeOffsetMinutes).longValue()) * 60000L;
		if (nowTime < 0L)
			nowTime = 0L;
	}
	else
		nowTime = System.currentTimeMillis();

	// Translate the states from a string to a number that will be understood by IJobManager.
	int[] matchingStates;
	if (documentStateTypes == null)
	{
		matchingStates = new int[]{IJobManager.DOCSTATE_NEVERPROCESSED,IJobManager.DOCSTATE_PREVIOUSLYPROCESSED,
			IJobManager.DOCSTATE_OUTOFSCOPE};
	}
	else
	{
		matchingStates = new int[documentStateTypes.length];
		k = 0;
		while (k < matchingStates.length)
		{
			matchingStates[k] = new Integer(documentStateTypes[k]).intValue();
			k++;
		}
	}
	HashMap matchingStatesHash = new HashMap();
	k = 0;
	while (k < matchingStates.length)
	{
		Integer state = new Integer(matchingStates[k++]);
		matchingStatesHash.put(state,state);
	}
	
	// Convert the status from a string to a number that will be understood by IJobManager
	int[] matchingStatuses;
	if (documentStatusTypes == null)
	{
		matchingStatuses = new int[]{IJobManager.DOCSTATUS_INACTIVE,IJobManager.DOCSTATUS_PROCESSING,IJobManager.DOCSTATUS_EXPIRING,
			IJobManager.DOCSTATUS_DELETING,IJobManager.DOCSTATUS_READYFORPROCESSING,IJobManager.DOCSTATUS_READYFOREXPIRATION,
			IJobManager.DOCSTATUS_WAITINGFORPROCESSING,IJobManager.DOCSTATUS_WAITINGFOREXPIRATION,IJobManager.DOCSTATUS_WAITINGFOREVER,
			IJobManager.DOCSTATUS_HOPCOUNTEXCEEDED};
	}
	else
	{
		matchingStatuses = new int[documentStatusTypes.length];
		k = 0;
		while (k < matchingStatuses.length)
		{
			matchingStatuses[k] = new Integer(documentStatusTypes[k]).intValue();
			k++;
		}
	}
	HashMap matchingStatusesHash = new HashMap();
	k = 0;
	while (k < matchingStatuses.length)
	{
		Integer status = new Integer(matchingStatuses[k++]);
		matchingStatusesHash.put(status,status);
	}


      out.write("\r\n");
      out.write("\t<form class=\"standardform\" name=\"report\" action=\"execute.jsp\" method=\"POST\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"op\" value=\"Continue\"/>\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"type\" value=\"documentstatus\"/>\r\n");
      out.write("\t\t<table class=\"displaytable\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\" colspan=\"1\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.Connection"));
      out.write("</td><td class=\"value\" colspan=\"1\">\r\n");
      out.write("\t\t\t\t\t<select name=\"statusconnection\" size=\"3\">\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print((statusConnection.length()==0)?"selected=\"selected\"":"");
      out.write(" value=\"\">-- ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.NotSpecified"));
      out.write(" --</option>\r\n");

	int i = 0;
	while (i < connList.length)
	{
		IRepositoryConnection conn = connList[i++];
		String thisConnectionName = conn.getName();
		String thisDescription = conn.getDescription();
		if (thisDescription == null || thisDescription.length() == 0)
			thisDescription = thisConnectionName;

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print((thisConnectionName.equals(statusConnection))?"selected=\"selected\"":"");
      out.write(" value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(thisConnectionName));
      out.write('\'');
      out.write('>');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(thisDescription));
      out.write("</option>\r\n");

	}

      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");

	if (eligibleList != null)
	{

      out.write("\r\n");
      out.write("\t\t\t\t<td class=\"description\" colspan=\"1\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.Jobs"));
      out.write("</td><td class=\"value\" colspan=\"1\">\r\n");
      out.write("\t\t\t\t\t<select multiple=\"true\" name=\"statusjobs\" size=\"3\">\r\n");

	    i = 0;
	    while (i < eligibleList.length)
	    {
		IJobDescription job = eligibleList[i++];
		String description = job.getDescription();
		Long identifier = job.getID();

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((selectedJobs.get(identifier)==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(identifier.toString());
      out.write('\'');
      out.write('>');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(description));
      out.write("</option>\r\n");

	    }

      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");

	}
	else
	{

      out.write("\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"2\"></td>\r\n");

	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.TimeOffsetFromNowMinutes"));
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<input name=\"statusscheduleoffset\" type=\"text\" size=\"6\" value=\"\"/>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentState"));
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<input name=\"statusdocumentstates_posted\" type=\"hidden\" value=\"true\"/>\r\n");
      out.write("\t\t\t\t\t<select name=\"statusdocumentstates\" multiple=\"true\" size=\"3\">\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatesHash.get(new Integer(IJobManager.DOCSTATE_NEVERPROCESSED))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATE_NEVERPROCESSED));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsThatHaveNeverBeenProcessed"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatesHash.get(new Integer(IJobManager.DOCSTATE_PREVIOUSLYPROCESSED))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATE_PREVIOUSLYPROCESSED));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsProcessedAtLeastOnce"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatesHash.get(new Integer(IJobManager.DOCSTATE_OUTOFSCOPE))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATE_OUTOFSCOPE));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsOutOfScope"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentState"));
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<input name=\"statusdocumentstatuses_posted\" type=\"hidden\" value=\"true\"/>\r\n");
      out.write("\t\t\t\t\t<select name=\"statusdocumentstatuses\" multiple=\"true\" size=\"3\">\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_INACTIVE))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_INACTIVE));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsThatAreNoLongerActive"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_PROCESSING))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_PROCESSING));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsCurrentlyInProgress"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_EXPIRING))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_EXPIRING));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsCurrentlyBeingExpired"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_DELETING))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_DELETING));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsCurrentlyBeingDeleted"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_READYFORPROCESSING))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_READYFORPROCESSING));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsCurrentlyAvailableForProcessing"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_READYFOREXPIRATION))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_READYFOREXPIRATION));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsCurrentlyAvailableForExpiration"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_WAITINGFORPROCESSING))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_WAITINGFORPROCESSING));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsNotYetProcessable"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_WAITINGFOREXPIRATION))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_WAITINGFOREXPIRATION));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsNotYetExpirable"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_WAITINGFOREVER))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_WAITINGFOREVER));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsWaitingForever"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option ");
      out.print(((matchingStatusesHash.get(new Integer(IJobManager.DOCSTATUS_HOPCOUNTEXCEEDED))==null)?"":"selected=\"selected\""));
      out.write(" value='");
      out.print(Integer.toString(IJobManager.DOCSTATUS_HOPCOUNTEXCEEDED));
      out.write('\'');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentsHopcountExceeded"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.DocumentIdentifierMatch"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\"><input type=\"text\" name=\"statusidentifiermatch\" size=\"40\" value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(identifierMatch));
      out.write("'/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"message\" colspan=\"4\">\r\n");

	if (statusConnection.length() > 0 && statusJobIdentifiers.length > 0)
	{

      out.write("\r\n");
      out.write("\t\t\t\t\t<a name=\"MainButton\"><input type=\"button\" value=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"documentstatus.Go"));
      out.write("\" onClick=\"javascript:Go()\" alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"documentstatus.ExecuteThisQuery"));
      out.write("\"/></a>\r\n");

	}
	else
	{

      out.write("\r\n");
      out.write("\t\t\t\t\t<a name=\"MainButton\"><input type=\"button\" value=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"documentstatus.Continue"));
      out.write("\" onClick=\"javascript:Continue()\" alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"documentstatus.Continue"));
      out.write("\"/></a>\r\n");

	}

      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t</table>\r\n");

	if (statusConnection.length() > 0)
	{
	    if (statusJobIdentifiers.length > 0)
	    {
		// Run the report.

		// First, we need to gather the sort order object.
		String sortOrderString = variableContext.getParameter("sortorder");
		SortOrder sortOrder;
		if (sortOrderString == null || sortOrderString.length() == 0)
			sortOrder = new SortOrder();
		else
			sortOrder = new SortOrder(sortOrderString);

		// Now, gather the column header that was clicked on (if any)
		String clickedColumn = variableContext.getParameter("clickcolumn");
		if (clickedColumn != null && clickedColumn.length() > 0)
			sortOrder.clickColumn(clickedColumn);

		// Gather the start
		String startRowString = variableContext.getParameter("startrow");
		int startRow = 0;
		if (startRowString != null && startRowString.length() > 0)
			startRow = Integer.parseInt(startRowString);

		// Gather the max
		String maxRowCountString = variableContext.getParameter("rowcount");
		int rowCount = 20;
		if (maxRowCountString != null && maxRowCountString.length() > 0)
			rowCount = Integer.parseInt(maxRowCountString);

		Long[] ourJobs = new Long[selectedJobs.size()];
		Iterator iter = selectedJobs.keySet().iterator();
		int zz = 0;
		while (iter.hasNext())
		{
			ourJobs[zz++] = (Long)iter.next();
		}

		RegExpCriteria identifierMatchObject = null;
		if (identifierMatch.length() > 0)
			identifierMatchObject = new RegExpCriteria(identifierMatch,true);
		StatusFilterCriteria criteria = new StatusFilterCriteria(ourJobs,nowTime,identifierMatchObject,matchingStates,matchingStatuses);

		IResultSet set = jobManager.genDocumentStatus(statusConnection,criteria,sortOrder,startRow,rowCount+1);


      out.write("\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"clickcolumn\" value=\"\"/>\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"startrow\" value='");
      out.print(Integer.toString(startRow));
      out.write("'/>\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"sortorder\" value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(sortOrder.toString()));
      out.write("'/>\r\n");
      out.write("\r\n");
      out.write("\t\t<table class=\"displaytable\">\r\n");
      out.write("\t\t    <tr class=\"headerrow\">\r\n");
      out.write("\t\t\t<td class=\"reportcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.Identifier"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumnheader\"><a href=\"javascript:void(0);\" onclick='javascript:ColumnClick(\"job\");'><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.Job"));
      out.write("</nobr></a></td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumnheader\"><a href=\"javascript:void(0);\" onclick='javascript:ColumnClick(\"state\");'><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.State"));
      out.write("</nobr></a></td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumnheader\"><a href=\"javascript:void(0);\" onclick='javascript:ColumnClick(\"status\");'><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.Status"));
      out.write("</nobr></a></td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumnheader\"><a href=\"javascript:void(0);\" onclick='javascript:ColumnClick(\"scheduled\");'><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.Scheduled"));
      out.write("</nobr></a></td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumnheader\"><a href=\"javascript:void(0);\" onclick='javascript:ColumnClick(\"action\");'><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.ScheduledAction"));
      out.write("</nobr></a></td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumnheader\"><a href=\"javascript:void(0);\" onclick='javascript:ColumnClick(\"retrycount\");'><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.RetryCount"));
      out.write("</nobr></a></td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumnheader\"><a href=\"javascript:void(0);\" onclick='javascript:ColumnClick(\"retrylimit\");'><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.RetryLimit"));
      out.write("</nobr></a></td>\r\n");
      out.write("\t\t    </tr>\r\n");

		zz = 0;
		boolean hasMoreRows = (set.getRowCount() > rowCount);
		int iterCount = hasMoreRows?rowCount:set.getRowCount();
		while (zz < iterCount)
		{
		    IResultRow row = set.getRow(zz);
		    
		    // Translate column values into something that can be reasonably displayed.
		    // Note that the actual hard work of translating things to human-readable strings largely is done by the query itself; this is because
		    // we want to sort on the columns, so it has to be that way.
		    
		    String[] identifierBreakdown = org.apache.manifoldcf.ui.util.Formatter.formatString(row.getValue("identifier").toString(),64,true,true);
		    Long scheduleTime = (Long)row.getValue("scheduled");
		    String scheduleTimeString = "";
		    if (scheduleTime != null)
			scheduleTimeString = org.apache.manifoldcf.ui.util.Formatter.formatTime(scheduleTime.longValue());
		    String scheduledActionString = (String)row.getValue("action");
		    if (scheduledActionString == null)
		        scheduledActionString = "";
		    Long retryCount = (Long)row.getValue("retrycount");
		    String retryCountString = "";
		    if (retryCount != null)
			retryCountString = retryCount.toString();
		    Long retryLimit = (Long)row.getValue("retrylimit");
		    String retryLimitString = "";
		    if (retryLimit != null)
		        retryLimitString = org.apache.manifoldcf.ui.util.Formatter.formatTime(retryLimit.longValue());
			

      out.write("\r\n");
      out.write("\t\t    <tr ");
      out.print("class=\""+((zz%2==0)?"evendatarow":"odddatarow")+"\"");
      out.write(">\r\n");
      out.write("\t\t\t<td class=\"reportcolumncell\">\r\n");

		    int q = 0;
		    while (q < identifierBreakdown.length)
		    {

      out.write("\r\n");
      out.write("\t\t\t\t<nobr>");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(identifierBreakdown[q++]));
      out.write("</nobr><br/>\r\n");

		    }

      out.write("\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumncell\">");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(row.getValue("job").toString()));
      out.write("</td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumncell\">");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(row.getValue("state").toString()));
      out.write("</td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumncell\">");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(row.getValue("status").toString()));
      out.write("</td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumncell\">");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(scheduleTimeString));
      out.write("</td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumncell\">");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(scheduledActionString));
      out.write("</td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumncell\">");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(retryCountString));
      out.write("</td>\r\n");
      out.write("\t\t\t<td class=\"reportcolumncell\">");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(retryLimitString));
      out.write("</td>\r\n");
      out.write("\t\t    </tr>\r\n");

			zz++;
		}

      out.write("\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t<table class=\"reportfootertable\">\r\n");
      out.write("\t\t    <tr class=\"reportfooterrow\">\r\n");
      out.write("\t\t\t<td class=\"reportfootercell\">\r\n");
      out.write("\t\t\t\t<nobr>\r\n");

		if (startRow == 0)
		{

      out.write("\r\n");
      out.write("\t\t\t\t\t");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.Previous"));
      out.write('\r');
      out.write('\n');

		}
		else
		{

      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"javascript:void(0);\" onclick='");
      out.print("javascript:SetPosition("+Integer.toString(startRow-rowCount)+");");
      out.write("' alt=\"Previous page\">Previous</a>\r\n");

		}

      out.write("\r\n");
      out.write("\t\t\t\t</nobr>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td class=\"reportfootercell\">\r\n");
      out.write("\t\t\t\t<nobr>\r\n");

		if (hasMoreRows == false)
		{

      out.write("\r\n");
      out.write("\t\t\t\t\t");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.Next"));
      out.write('\r');
      out.write('\n');

		}
		else
		{

      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"javascript:void(0);\" onclick='");
      out.print("javascript:SetPosition("+Integer.toString(startRow+rowCount)+");");
      out.write("' alt=\"Next page\">Next</a>\r\n");

		}

      out.write("\r\n");
      out.write("\t\t\t\t</nobr>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td class=\"reportfootercell\">\r\n");
      out.write("\t\t\t\t<nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.Rows"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t<nobr>");
      out.print(Integer.toString(startRow));
      out.write('-');
      out.print((hasMoreRows?Integer.toString(startRow+rowCount-1):"END"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td class=\"reportfootercell\">\r\n");
      out.write("\t\t\t\t<nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.RowsPerPage"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t<nobr><input type=\"text\" name=\"rowcount\" size=\"5\" value='");
      out.print(Integer.toString(rowCount));
      out.write("'/></nobr>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t    </tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\r\n");

	    }
	    else
	    {

      out.write("\r\n");
      out.write("\t\t<table class=\"displaytable\"><tr><td class=\"message\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.PleaseSelectAtLeastOneJob"));
      out.write("</td></tr></table>\r\n");

	    }
	}
	else
	{

      out.write("\r\n");
      out.write("\t\t<table class=\"displaytable\"><tr><td class=\"message\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.PleaseSelectaConnection"));
      out.write("</td></tr></table>\r\n");

	}

      out.write("\r\n");
      out.write("\t</form>\r\n");

}
else
{

      out.write("\r\n");
      out.write("\t\t<table class=\"displaytable\">\r\n");
      out.write("\t\t\t<tr><td class=\"separator\" colspan=\"1\"><hr/></td></tr>\r\n");
      out.write("\t\t\t<tr><td class=\"message\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"documentstatus.PleaseTryAgainLater"));
      out.write("</td></tr>\r\n");
      out.write("\t\t</table>\r\n");

}

      out.write("\r\n");
      out.write("       </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
