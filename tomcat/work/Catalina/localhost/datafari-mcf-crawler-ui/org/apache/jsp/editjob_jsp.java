/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.40
 * Generated at: 2015-04-07 13:54:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.manifoldcf.core.interfaces.*;
import org.apache.manifoldcf.core.util.*;
import org.apache.manifoldcf.ui.i18n.*;
import org.apache.manifoldcf.agents.interfaces.*;
import org.apache.manifoldcf.crawler.interfaces.*;
import org.apache.manifoldcf.authorities.interfaces.*;
import java.util.*;

public final class editjob_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/WEB-INF/jsp/x.tld", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/adminHeaders.jsp", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/WEB-INF/jsp/c.tld", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/WEB-INF/jsp/sql.tld", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/WEB-INF/jsp/fmt.tld", Long.valueOf(1428407612000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 response.setHeader("Pragma","No-cache");
response.setDateHeader("Expires",0);
response.setHeader("Cache-Control", "no-cache");
response.setDateHeader("max-age", 0);
response.setContentType("text/html;charset=utf-8");

      out.write("\r\n");
      out.write("\r\n");


/* $Id: adminHeaders.jsp 1601529 2014-06-09 23:19:08Z kwright $ */

/**
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements. See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License. You may obtain a copy of the License at
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.manifoldcf.ui.beans.ThreadContext thread = null;
      thread = (org.apache.manifoldcf.ui.beans.ThreadContext) _jspx_page_context.getAttribute("thread", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (thread == null){
        thread = new org.apache.manifoldcf.ui.beans.ThreadContext();
        _jspx_page_context.setAttribute("thread", thread, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      org.apache.manifoldcf.ui.beans.AdminProfile adminprofile = null;
      synchronized (session) {
        adminprofile = (org.apache.manifoldcf.ui.beans.AdminProfile) _jspx_page_context.getAttribute("adminprofile", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (adminprofile == null){
          adminprofile = new org.apache.manifoldcf.ui.beans.AdminProfile();
          _jspx_page_context.setAttribute("adminprofile", adminprofile, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	if (adminprofile.getLoggedOn() == false)
	{
		response.sendRedirect("login.jsp");
		return;
	}

	IThreadContext threadContext = thread.getThreadContext();
	org.apache.manifoldcf.ui.multipart.MultipartWrapper variableContext = (org.apache.manifoldcf.ui.multipart.MultipartWrapper)threadContext.get("__WRAPPER__");
	if (variableContext == null)
	{
		variableContext = new org.apache.manifoldcf.ui.multipart.MultipartWrapper(request,adminprofile);
		threadContext.save("__WRAPPER__",variableContext);
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


/* $Id: editjob.jsp 1625187 2014-09-15 23:42:59Z kwright $ */

/**
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements. See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License. You may obtain a copy of the License at
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

      out.write("\r\n");
      out.write("\r\n");

    // The contract of this edit page is as follows.  It is either called directly, in which case it is expected to be creating
    // a job or beginning the process of editing an existing job, or it is called via redirection from execute.jsp, in which case
    // the job object being edited will be placed in the thread context under the name "JobObject".
    // It may also be called directly with a parameter of "origjobid", which implies that a copy operation should be started.
    try
    {
	// Get the job manager handle
	IJobManager manager = JobManagerFactory.make(threadContext);
	IRepositoryConnectionManager connMgr = RepositoryConnectionManagerFactory.make(threadContext);
	IRepositoryConnection[] connList = connMgr.getAllConnections();
	IOutputConnectionManager outputMgr = OutputConnectionManagerFactory.make(threadContext);
	IOutputConnection[] outputList = outputMgr.getAllConnections();
	ITransformationConnectionManager transformationMgr = TransformationConnectionManagerFactory.make(threadContext);
	ITransformationConnection[] transformationList = transformationMgr.getAllConnections();

	IOutputConnectorPool outputConnectorPool = OutputConnectorPoolFactory.make(threadContext);
	IRepositoryConnectorPool repositoryConnectorPool = RepositoryConnectorPoolFactory.make(threadContext);
	ITransformationConnectorPool transformationConnectorPool = TransformationConnectorPoolFactory.make(threadContext);

	// Figure out tab name and sequence number
	String tabName = variableContext.getParameter("tabname");
	String tabSequenceNumber = variableContext.getParameter("sequencenumber");
	int tabSequenceInt;
	if (tabName == null || tabName.length() == 0)
	{
		tabName = Messages.getString(pageContext.getRequest().getLocale(),"editjob.Name");
		tabSequenceInt = -1;
	}
	else
	{
		if (tabSequenceNumber == null || tabSequenceNumber.length() == 0)
			tabSequenceInt = -1;
		else
			tabSequenceInt = Integer.parseInt(tabSequenceNumber);
	}
	
	// Get a loaded job object, somehow.
	String jobID = null;
	IJobDescription job = (IJobDescription)threadContext.get("JobObject");
	if (job == null)
	{
		// We did not go through execute.jsp
		// We might have received an argument specifying the connection name.
		jobID = variableContext.getParameter("jobid");
		String origJobID = variableContext.getParameter("origjobid");
		if (origJobID == null || origJobID.length() == 0)
			origJobID = jobID;
		if (origJobID != null)
			job = manager.load(new Long(origJobID));
	}
	else
		jobID = job.getID().toString();

	// Setup default fields
	String connectionName = "";
	String description = "";
	int type = IJobDescription.TYPE_SPECIFIED;
	Specification documentSpecification = new Specification();
	
	// Pipeline data
	String[] pipelineConnectionNames = new String[0];
	String[] pipelineDescriptions = new String[0];
	boolean[] pipelineIsOutputs = new boolean[0];
	int[] pipelinePrerequisites = new int[0];
	Specification[] pipelineSpecifications = new Specification[0];
	
	ArrayList scheduleRecords = new ArrayList();

	EnumeratedValues dayOfWeek = null;
	EnumeratedValues dayOfMonth = null;
	EnumeratedValues monthOfYear = null;
	EnumeratedValues year = null;
	EnumeratedValues hourOfDay = null;
	EnumeratedValues minutesOfHour = null;
	// Duration in minutes
	Long duration = null;
	// RequestMinimum flag
	boolean requestMinimum = false;

	// Priority
	int priority = 5;
	// Minimum recrawl interval (Default: 1 day)
	Long recrawlInterval = new Long(60L * 24L);
	// Maximum recrawl interval (Default: none)
	Long maxRecrawlInterval = null;
	// Reseed interval (Default: 60 minutes)
	Long reseedInterval = new Long(60L);
	// Expiration interval (Default: never)
	Long expirationInterval = null;
	// Start method
	int startMethod = IJobDescription.START_DISABLE;
	// Hopcount mode
	int hopcountMode = IJobDescription.HOPCOUNT_ACCURATE;
	// Hop filters
	Map hopFilterMap = new HashMap();

	// If the job is not null, prepopulate everything with what comes from it.
	if (job != null)
	{
		// Set up values
		description = job.getDescription();
		connectionName = job.getConnectionName();
		
		pipelineConnectionNames = new String[job.countPipelineStages()];
		pipelineDescriptions = new String[job.countPipelineStages()];
		pipelineIsOutputs = new boolean[job.countPipelineStages()];
		pipelinePrerequisites = new int[job.countPipelineStages()];
		pipelineSpecifications = new Specification[job.countPipelineStages()];
		for (int j = 0; j < job.countPipelineStages(); j++)
		{
			pipelineConnectionNames[j] = job.getPipelineStageConnectionName(j);
			pipelineDescriptions[j] = job.getPipelineStageDescription(j);
			pipelineIsOutputs[j] = job.getPipelineStageIsOutputConnection(j);
			pipelinePrerequisites[j] = job.getPipelineStagePrerequisite(j);
			pipelineSpecifications[j] = job.getPipelineStageSpecification(j);
		}
		type = job.getType();
		startMethod = job.getStartMethod();
		hopcountMode = job.getHopcountMode();
		documentSpecification = job.getSpecification();
		// Fill in schedule records from job
		for (int j = 0; j < job.getScheduleRecordCount(); j++)
		{
			scheduleRecords.add(job.getScheduleRecord(j));
		}

		priority = job.getPriority();
		Long value = job.getInterval();
		recrawlInterval = (value==null)?null:new Long(value.longValue()/60000L);
		value = job.getMaxInterval();
		maxRecrawlInterval = (value==null)?null:new Long(value.longValue()/60000L);
		value = job.getReseedInterval();
		reseedInterval = (value==null)?null:new Long(value.longValue()/60000L);
		value = job.getExpiration();
		expirationInterval = (value==null)?null:new Long(value.longValue()/60000L);
		hopFilterMap = job.getHopCountFilters();
	}


	// This form reposts to itself.  It basically only allows the connection to be picked once; once done, the repost occurs
	// and cannot be undone.
	// Therefore, there are three possible entry conditions:
	// 1) no jobid w/no connection name, which indicates a brand-new job without a chosen connection
	// 2) no jobid w/a connection name, which indicates that the connection at least has been chosen
	// 3) a jobid and a connection name, which indicates that we are editing an existing connection.
	// There are similar combinations for output connections.

	int model = IRepositoryConnector.MODEL_ADD_CHANGE_DELETE;
	String[] relationshipTypes = null;
	List<String> tabsArray = new ArrayList<String>();
	List<Integer> sequenceArray = new ArrayList<Integer>();
	
	IRepositoryConnection connection = null;
	if (connectionName.length() > 0)
	{
		connection = connMgr.load(connectionName);
		model = RepositoryConnectorFactory.getConnectorModel(threadContext,connection.getClassName());
		relationshipTypes = RepositoryConnectorFactory.getRelationshipTypes(threadContext,connection.getClassName());
	}

	// Set up the predefined tabs
	tabsArray.add(Messages.getString(pageContext.getRequest().getLocale(),"editjob.Name"));
	sequenceArray.add(null);
	tabsArray.add(Messages.getString(pageContext.getRequest().getLocale(),"editjob.Connection"));
	sequenceArray.add(null);
	if (connectionName.length() > 0)
	{
		tabsArray.add(Messages.getString(pageContext.getRequest().getLocale(),"editjob.Scheduling"));
		sequenceArray.add(null);
		if (relationshipTypes != null && relationshipTypes.length > 0)
		{
			tabsArray.add(Messages.getString(pageContext.getRequest().getLocale(),"editjob.HopFilters"));
			sequenceArray.add(null);
		}
	}

	// Get the names of the various Javascript methods we'll need to call
	String checkMethod = "checkSpecification";
	String saveCheckMethod = "checkSpecificationForSave";
	String[] pipelineCheckMethods = new String[pipelineConnectionNames.length];
	String[] pipelineCheckForSaveMethods = new String[pipelineConnectionNames.length];
	for (int j = 0; j < pipelineConnectionNames.length; j++)
	{
		pipelineCheckMethods[j] = "unknown";
		pipelineCheckForSaveMethods[j] = "unknown";
	}
	
	if (connection != null)
	{
		IRepositoryConnector connector = RepositoryConnectorFactory.getConnectorNoCheck(connection.getClassName());
		if (connector != null)
		{
			checkMethod = connector.getFormCheckJavascriptMethodName(0);
			saveCheckMethod = connector.getFormPresaveCheckJavascriptMethodName(0);
		}
	}

	for (int j = 0; j < pipelineConnectionNames.length; j++)
	{
		if (pipelineIsOutputs[j])
		{
			IOutputConnection outputConnection = outputMgr.load(pipelineConnectionNames[j]);
			if (outputConnection != null)
			{
				IOutputConnector outputConnector = OutputConnectorFactory.getConnectorNoCheck(outputConnection.getClassName());
				if (outputConnector != null)
				{
					pipelineCheckMethods[j] = outputConnector.getFormCheckJavascriptMethodName(1+j);
					pipelineCheckForSaveMethods[j] = outputConnector.getFormPresaveCheckJavascriptMethodName(1+j);
				}
			}
		}
		else
		{
			ITransformationConnection transformationConnection = transformationMgr.load(pipelineConnectionNames[j]);
			if (transformationConnection != null)
			{
				ITransformationConnector transformationConnector = TransformationConnectorFactory.getConnectorNoCheck(transformationConnection.getClassName());
				if (transformationConnector != null)
				{
					pipelineCheckMethods[j] = transformationConnector.getFormCheckJavascriptMethodName(1+j);
					pipelineCheckForSaveMethods[j] = transformationConnector.getFormPresaveCheckJavascriptMethodName(1+j);
				}
			}
		}
	}


      out.write("\r\n");
      out.write("\r\n");
      out.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\r\n");
      out.write("\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("\t<link rel=\"StyleSheet\" href=\"style.css\" type=\"text/css\" media=\"screen\"/>\r\n");
      out.write("\t<title>\r\n");
      out.write("\t\t");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.ApacheManifoldCFEditJob"));
      out.write("\r\n");
      out.write("\t</title>\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t<!--\r\n");
      out.write("\r\n");
      out.write("\t// Use this method to repost the form and pick a new tab\r\n");
      out.write("\tfunction SelectTab(newtab)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (checkForm())\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tdocument.editjob.tabname.value = newtab;\r\n");
      out.write("\t\t\tdocument.editjob.sequencenumber.value = \"\";\r\n");
      out.write("\t\t\tdocument.editjob.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Use this method to repost the form and pick a new tab\r\n");
      out.write("\tfunction SelectSequencedTab(newtab, sequencenumber)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (checkForm())\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tdocument.editjob.tabname.value = newtab;\r\n");
      out.write("\t\t\tdocument.editjob.sequencenumber.value = sequencenumber;\r\n");
      out.write("\t\t\tdocument.editjob.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Use this method to repost the form,\r\n");
      out.write("\t// and set the anchor request.\r\n");
      out.write("\tfunction postFormSetAnchor(anchorValue)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (checkForm())\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tif (anchorValue != \"\")\r\n");
      out.write("\t\t\t\tdocument.editjob.action = document.editjob.action + \"#\" + anchorValue;\r\n");
      out.write("\t\t\tdocument.editjob.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Use this method to repost the form\r\n");
      out.write("\tfunction postFormNew()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (checkForm())\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tdocument.editjob.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Deprecated\r\n");
      out.write("\tfunction postForm(schedCount)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (checkForm())\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tdocument.editjob.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction Save()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (checkForm())\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t// Can't submit until all required fields have been set.\r\n");
      out.write("\t\t\t// Some of these don't live on the current tab, so don't set\r\n");
      out.write("\t\t\t// focus.\r\n");
      out.write("\r\n");
      out.write("\t\t\t// Check our part of the form, for save\r\n");
      out.write("\t\t\tif (editjob.description.value == \"\")\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.JobMustHaveAName"));
      out.write("\");\r\n");
      out.write("\t\t\t\tSelectTab(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.Name"));
      out.write("\");\r\n");
      out.write("\t\t\t\tdocument.editjob.description.focus();\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");

	for (int j = 0; j < pipelineCheckForSaveMethods.length; j++)
	{

      out.write("\r\n");
      out.write("\t\t\tif (window.");
      out.print(pipelineCheckForSaveMethods[j]);
      out.write(")\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tif (");
      out.print(pipelineCheckForSaveMethods[j]);
      out.write("() == false)\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");

	}

      out.write("\r\n");
      out.write("\t\t\tif (window.");
      out.print(saveCheckMethod);
      out.write(")\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tif (");
      out.print(saveCheckMethod);
      out.write("() == false)\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tdocument.editjob.op.value=\"Save\";\r\n");
      out.write("\t\t\tdocument.editjob.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction Cancel()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tdocument.editjob.op.value=\"Cancel\";\r\n");
      out.write("\t\tdocument.editjob.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction Continue()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tdocument.editjob.op.value=\"Continue\";\r\n");
      out.write("\t\tpostFormNew();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction InsertPipelineStageTransformation(n)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (editjob.transformation_connectionname.value == \"\")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.SelectATransformationStageConnectionName"));
      out.write("\");\r\n");
      out.write("\t\t\teditjob.transformation_connectionname.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\teval(\"document.editjob.pipeline_\"+n+\"_op.value = 'InsertTransformation'\");\r\n");
      out.write("\t\tpostFormSetAnchor(\"pipeline_\"+(n+1)+\"_tag\");\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction InsertPipelineStageOutput(n)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (editjob.output_connectionname.value == \"\")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.SelectAnOutputStageConnectionName"));
      out.write("\");\r\n");
      out.write("\t\t\teditjob.output_connectionname.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\teval(\"document.editjob.pipeline_\"+n+\"_op.value = 'InsertOutput'\");\r\n");
      out.write("\t\tpostFormSetAnchor(\"pipeline_\"+(n+1)+\"_tag\");\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction AppendPipelineStageOutput()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (editjob.output_connectionname.value == \"\")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.SelectAnOutputStageConnectionName"));
      out.write("\");\r\n");
      out.write("\t\t\teditjob.output_connectionname.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdocument.editjob.output_op.value=\"Add\";\r\n");
      out.write("\t\tpostFormSetAnchor(\"output_tag\");\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction DeletePipelineStage(n)\r\n");
      out.write("\t{\r\n");
      out.write("\t\teval(\"document.editjob.pipeline_\"+n+\"_op.value = 'Delete'\");\r\n");
      out.write("\t\tif (n == 0)\r\n");
      out.write("\t\t\tpostFormSetAnchor(\"pipeline_tag\");\r\n");
      out.write("\t\telse\r\n");
      out.write("\t\t\tpostFormSetAnchor(\"pipeline_\"+(n-1)+\"_tag\");\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction AddScheduledTime()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (editjob.duration.value != \"\" && !isInteger(editjob.duration.value))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.DurationMustBeAValidInteger"));
      out.write("\");\r\n");
      out.write("\t\t\teditjob.duration.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdocument.editjob.recordop.value=\"Add Scheduled Time\";\r\n");
      out.write("\t\tpostFormSetAnchor(\"add_schedule\");\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction RemoveSchedule(n)\r\n");
      out.write("\t{\r\n");
      out.write("\t\teval(\"document.editjob.recordop\"+n+\".value = 'Remove Schedule'\");\r\n");
      out.write("\t\tif (n == 0)\r\n");
      out.write("\t\t\tpostFormSetAnchor(\"add_schedule\");\r\n");
      out.write("\t\telse\r\n");
      out.write("\t\t\tpostFormSetAnchor(\"remove_schedule_\"+(n-1));\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction checkForm()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (!checkRecrawl())\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\tif (!checkMaxRecrawl())\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\tif (!checkRecrawlConsistent())\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\tif (!checkReseed())\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\tif (!checkExpiration())\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\tif (!checkSchedule())\r\n");
      out.write("\t\t\treturn false;\r\n");

	for (int j = 0; j < pipelineCheckMethods.length; j++)
	{

      out.write("\r\n");
      out.write("\t\tif (window.");
      out.print(pipelineCheckMethods[j]);
      out.write(")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tif (");
      out.print(pipelineCheckMethods[j]);
      out.write("() == false)\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");

	}

      out.write("\r\n");
      out.write("\t\t// Check the connector part\r\n");
      out.write("\t\tif (window.");
      out.print(checkMethod);
      out.write(")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tif (");
      out.print(checkMethod);
      out.write("() == false)\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction checkSchedule()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar i = 0;\r\n");
      out.write("\t\tvar schedCount = ");
      out.print(Integer.toString(scheduleRecords.size()));
      out.write(";\r\n");
      out.write("\t\twhile (i < schedCount)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar propertyname = \"duration\" + i;\r\n");
      out.write("\t\t\tif (eval(\"editjob.\"+propertyname+\".value\") != \"\" && !isInteger(eval(\"editjob.\"+propertyname+\".value\")))\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.DurationMustBeAValidInteger"));
      out.write("\");\r\n");
      out.write("\t\t\t\teval(\"editjob.\"+propertyname+\".focus()\");\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\ti = i+1;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction checkRecrawl()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (editjob.recrawlinterval.value != \"\" && !isInteger(editjob.recrawlinterval.value))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.RecrawlIntervalMustBeAValidIntegerOrNull"));
      out.write("\");\r\n");
      out.write("\t\t\teditjob.recrawlinterval.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction checkMaxRecrawl()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (editjob.maxrecrawlinterval.value != \"\" && !isInteger(editjob.maxrecrawlinterval.value))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.MaxRecrawlIntervalMustBeAValidIntegerOrNull"));
      out.write("\");\r\n");
      out.write("\t\t\teditjob.maxrecrawlinterval.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction checkRecrawlConsistent()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (editjob.maxrecrawlinterval.value != \"\" && editjob.recrawlinterval.value != \"\" && parseInt(editjob.maxrecrawlinterval.value) < parseInt(editjob.recrawlinterval.value))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.MaxRecrawlIntervalMustBeLargerThanRecrawlInterval"));
      out.write("\");\r\n");
      out.write("\t\t\teditjob.maxrecrawlinterval.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction checkReseed()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (editjob.reseedinterval.value != \"\" && !isInteger(editjob.reseedinterval.value))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.ReseedIntervalMustBeAValidIntegerOrNull"));
      out.write("\");\r\n");
      out.write("\t\t\teditjob.reseedinterval.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction checkExpiration()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (editjob.expirationinterval.value != \"\" && !isInteger(editjob.expirationinterval.value))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\talert(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"editjob.ExpirationIntervalMustBeAValidIntegerOrNull"));
      out.write("\");\r\n");
      out.write("\t\t\teditjob.expirationinterval.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction isInteger(value)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar anum=/(^\\d+$)/;\r\n");
      out.write("\t\treturn anum.test(value);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction isRegularExpression(value)\r\n");
      out.write("\t{\r\n");
      out.write("\t\ttry\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar foo = \"teststring\";\r\n");
      out.write("                        foo.search(value.replace(/\\(\\?i\\)/,\"\"));\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tcatch (e)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//-->\r\n");
      out.write("\t</script>\r\n");

	if (connection != null)
	{
		IRepositoryConnector repositoryConnector = repositoryConnectorPool.grab(connection);
		if (repositoryConnector != null)
		{
			try
			{
				repositoryConnector.outputSpecificationHeader(new org.apache.manifoldcf.ui.jsp.JspWrapper(out,adminprofile),pageContext.getRequest().getLocale(),documentSpecification,0,tabsArray);
			}
			finally
			{
				repositoryConnectorPool.release(connection,repositoryConnector);
			}
		}
		Integer repositoryConnectionSequenceNumber = new Integer(0);
		while (sequenceArray.size() < tabsArray.size())
		{
			sequenceArray.add(repositoryConnectionSequenceNumber);
		}
	}

      out.write("\r\n");
      out.write("\r\n");

	for (int j = 0; j < pipelineConnectionNames.length; j++)
	{
		if (pipelineIsOutputs[j])
		{
			IOutputConnection outputConnection = outputMgr.load(pipelineConnectionNames[j]);
			if (outputConnection != null)
			{
				IOutputConnector outputConnector = outputConnectorPool.grab(outputConnection);
				if (outputConnector != null)
				{
					try
					{
						outputConnector.outputSpecificationHeader(new org.apache.manifoldcf.ui.jsp.JspWrapper(out,adminprofile),pageContext.getRequest().getLocale(),pipelineSpecifications[j],1+j,tabsArray);
					}
					finally
					{
						outputConnectorPool.release(outputConnection,outputConnector);
					}
				}
			}
		}
		else
		{
			ITransformationConnection transformationConnection = transformationMgr.load(pipelineConnectionNames[j]);
			if (transformationConnection != null)
			{
				ITransformationConnector transformationConnector = transformationConnectorPool.grab(transformationConnection);
				if (transformationConnector != null)
				{
					try
					{
						transformationConnector.outputSpecificationHeader(new org.apache.manifoldcf.ui.jsp.JspWrapper(out,adminprofile),pageContext.getRequest().getLocale(),pipelineSpecifications[j],1+j,tabsArray);
					}
					finally
					{
						transformationConnectorPool.release(transformationConnection,transformationConnector);
					}
				}
			}
		}
		Integer connectionSequenceNumber = new Integer(1+j);
		while (sequenceArray.size() < tabsArray.size())
		{
			sequenceArray.add(connectionSequenceNumber);
		}
	}
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body class=\"standardbody\">\r\n");
      out.write("\r\n");
      out.write("    <table class=\"page\">\r\n");
      out.write("      <tr><td colspan=\"2\" class=\"banner\">");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "banner.jsp", out, true);
      out.write("</td></tr>\r\n");
      out.write("      <tr><td class=\"navigation\">");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "navigation.jsp", out, true);
      out.write("</td>\r\n");
      out.write("       <td class=\"darkwindow\">\r\n");

	if (connList.length == 0)
	{

      out.write("\r\n");
      out.write("\t<p class=\"windowtitle\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.EditaJob"));
      out.write("</p>\r\n");
      out.write("\t<table class=\"displaytable\"><tr><td class=\"message\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.NoRepositoryConnectionsDefinedCreateOneFirst"));
      out.write("</td></tr></table>\r\n");

	}
	else if (outputList.length == 0)
	{

      out.write("\r\n");
      out.write("\t<p class=\"windowtitle\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.EditaJob"));
      out.write("</p>\r\n");
      out.write("\t<table class=\"displaytable\"><tr><td class=\"message\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.NoOutputConnectionsDefinedCreateOneFirst"));
      out.write("</td></tr></table>\r\n");

	}
	else
	{

      out.write("\r\n");
      out.write("\t<form class=\"standardform\" name=\"editjob\" action=\"execute.jsp\" method=\"POST\" enctype=\"multipart/form-data\">\r\n");
      out.write("\t  <input type=\"hidden\" name=\"op\" value=\"Continue\"/>\r\n");
      out.write("\t  <input type=\"hidden\" name=\"type\" value=\"job\"/>\r\n");
      out.write("\t  <input type=\"hidden\" name=\"index\" value=\"\"/>\r\n");
      out.write("\t  <input type=\"hidden\" name=\"tabname\" value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(tabName));
      out.write("'/>\r\n");
      out.write("\t  <input type=\"hidden\" name=\"sequencenumber\" value='");
      out.print(((tabSequenceInt==-1)?"":Integer.toString(tabSequenceInt)));
      out.write("'/>\r\n");

	if (jobID != null)
	{

      out.write("\r\n");
      out.write("\t  <input type=\"hidden\" name=\"jobid\" value='");
      out.print(jobID);
      out.write("'/>\r\n");

	}

      out.write("\r\n");
      out.write("\t    <table class=\"tabtable\">\r\n");
      out.write("\t      <tr class=\"tabspacerrow\">\r\n");
      out.write("\t\t<td class=\"spacertab\" colspan=\"");
      out.print(tabsArray.size());
      out.write("\"></td>\r\n");
      out.write("\t\t<td class=\"remaindertab\" rowspan=\"3\">\r\n");

	if (description.length() > 0)
	{

      out.write("\r\n");
      out.write("\t\t\t  <nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.EditJob"));
      out.write(' ');
      out.write('\'');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(description));
      out.write("'</nobr>\r\n");

	}
	else
	{

      out.write("\r\n");
      out.write("\t\t          <nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.EditaJob"));
      out.write("</nobr>\r\n");

	}

      out.write("\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t      </tr>\r\n");
      out.write("\t      <tr class=\"tabsequencerow\">\r\n");

	Integer currentSequenceNumber = null;
	int startColumn = 0;
	for (int tabNum = 0; tabNum < tabsArray.size(); tabNum++)
	{
		boolean doswitch = false;
		Integer sequenceNumber = sequenceArray.get(tabNum);
		if (sequenceNumber == null || currentSequenceNumber == null)
			doswitch = (sequenceNumber != null || currentSequenceNumber != null);
		else
			doswitch = !sequenceNumber.equals(currentSequenceNumber);
		if (doswitch)
		{
			int colspan = tabNum - startColumn;
			if (colspan > 0)
			{
				if (currentSequenceNumber == null)
				{

      out.write("\r\n");
      out.write("\t\t      <td class=\"blanksequencetab\" colspan=\"");
      out.print(colspan);
      out.write("\"></td>\r\n");

				}
				else
				{

      out.write("\r\n");
      out.write("\t\t      <td class=\"sequencetab\" colspan=\"");
      out.print(colspan);
      out.write('"');
      out.write('>');
      out.print((currentSequenceNumber.intValue()+1));
      out.write(".</td>\r\n");

				}
			}
			startColumn = tabNum;
			currentSequenceNumber = sequenceNumber;
		}
	}
	if (startColumn != tabsArray.size())
	{
		int colspan = tabsArray.size() - startColumn;
		if (currentSequenceNumber == null)
		{

      out.write("\r\n");
      out.write("\t\t      <td class=\"blanksequencetab\" colspan=\"");
      out.print(colspan);
      out.write("\"></td>\r\n");

		}
		else
		{

      out.write("\r\n");
      out.write("\t\t      <td class=\"sequencetab\" colspan=\"");
      out.print(colspan);
      out.write('"');
      out.write('>');
      out.print((currentSequenceNumber.intValue()+1));
      out.write(".</td>\r\n");

		}
	}
	// Final (remainder) cell left out on purpose; filled in above.

      out.write("\r\n");
      out.write("\t      </tr>\r\n");
      out.write("\t      <tr class=\"tabrow\">\r\n");

	for (int tabNum = 0; tabNum < tabsArray.size(); tabNum++)
	{
		String tab = tabsArray.get(tabNum);
		Integer sequenceNumber = sequenceArray.get(tabNum);
		int sequenceNumberInt = (sequenceNumber == null)?-1:sequenceNumber.intValue();
		if (tab.equals(tabName) && (tabSequenceInt == -1 || sequenceNumberInt == tabSequenceInt))
		{

      out.write("\r\n");
      out.write("\t\t      <td class=\"activetab\"><nobr>");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(tab));
      out.write("</nobr></td>\r\n");

		}
		else
		{

      out.write("\r\n");
      out.write("\t\t      <td class=\"passivetab\"><nobr><a href=\"javascript:void(0);\" alt='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(tab)+" "+Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.tab"));
      out.write("' onclick='");
      out.print("javascript:SelectSequencedTab(\""+tab+"\",\""+((sequenceNumber==null)?"":sequenceNumber.toString())+"\");return false;");
      out.write('\'');
      out.write('>');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(tab));
      out.write("</a></nobr></td>\r\n");

		}
	}
	// Missing remainder tab ON PURPOSE -- comes from rowspan=2 tab above

      out.write("\r\n");
      out.write("\t      </tr>\r\n");
      out.write("\t      <tr class=\"tabbodyrow\">\r\n");
      out.write("\t\t<td class=\"tabbody\" colspan='");
      out.print(Integer.toString(tabsArray.size()+1));
      out.write("'>\r\n");
      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"schedulerecords\" value='");
      out.print(Integer.toString(scheduleRecords.size()));
      out.write("'/>\r\n");

	// The NAME tab
	if (tabName.equals(Messages.getString(pageContext.getRequest().getLocale(),"editjob.Name")) && tabSequenceInt == -1)
	{

      out.write("\r\n");
      out.write("\t\t  <table class=\"displaytable\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\" colspan=\"1\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.NameColon"));
      out.write("</nobr></td><td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" size=\"50\" name=\"description\" value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(description));
      out.write("'/>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t  </table>\r\n");

	}
	else
	{

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"description\" value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(description));
      out.write("'/>\r\n");

	}

	// Hop Filters tab
	if (tabName.equals(Messages.getString(pageContext.getRequest().getLocale(),"editjob.HopFilters")) && tabSequenceInt == -1)
	{
	    if (relationshipTypes != null)
	    {

      out.write("\r\n");
      out.write("\t\t  <table class=\"displaytable\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><input type=\"hidden\" name=\"hopfilters\" value=\"true\"/><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");

		int i = 0;
		while (i < relationshipTypes.length)
		{
			String relationshipType = relationshipTypes[i++];
			String mapField = "";
			Long mapValue = (Long)hopFilterMap.get(relationshipType);
			if (mapValue != null)
				mapField = mapValue.toString();

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\" colspan=\"1\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.MaximumHopCountForType"));
      out.write(' ');
      out.write('\'');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(relationshipType));
      out.write('\'');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.colon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\" >\r\n");
      out.write("\t\t\t\t\t<input name='");
      out.print("hopmax_"+org.apache.manifoldcf.ui.util.Encoder.attributeEscape(relationshipType));
      out.write("' type=\"text\" size=\"5\" value='");
      out.print(mapField);
      out.write("'/>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");

		}

      out.write("\r\n");
      out.write("\t\t\t<tr><td class=\"separator\" colspan=\"4\"><hr/></td></tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\" colspan=\"1\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.HopCountModeColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<nobr><input type=\"radio\" name=\"hopcountmode\" value='");
      out.print(Integer.toString(IJobDescription.HOPCOUNT_ACCURATE));
      out.write('\'');
      out.write(' ');
      out.print(((hopcountMode==IJobDescription.HOPCOUNT_ACCURATE)?"checked=\"true\"":""));
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.DeleteUnreachableDocuments"));
      out.write("</input></nobr><br/>\r\n");
      out.write("\t\t\t\t\t<nobr><input type=\"radio\" name=\"hopcountmode\" value='");
      out.print(Integer.toString(IJobDescription.HOPCOUNT_NODELETE));
      out.write('\'');
      out.write(' ');
      out.print(((hopcountMode==IJobDescription.HOPCOUNT_NODELETE)?"checked=\"true\"":""));
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.KeepUnreachableDocumentsForNow"));
      out.write("</input></nobr><br/>\r\n");
      out.write("\t\t\t\t\t<nobr><input type=\"radio\" name=\"hopcountmode\" value='");
      out.print(Integer.toString(IJobDescription.HOPCOUNT_NEVERDELETE));
      out.write('\'');
      out.write(' ');
      out.print(((hopcountMode==IJobDescription.HOPCOUNT_NEVERDELETE)?"checked=\"true\"":""));
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.KeepUnreachableDocumentsForever"));
      out.write("</input></nobr><br/>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t  </table>\r\n");

	    }
	}
	else
	{
	    if (relationshipTypes != null)
	    {

      out.write("\r\n");
      out.write("\t<input type=\"hidden\" name=\"hopfilters\" value=\"true\"/>\r\n");

		int i = 0;
		while (i < relationshipTypes.length)
		{
			String relationshipType = relationshipTypes[i++];
			String mapField = "";
			Long mapValue = (Long)hopFilterMap.get(relationshipType);
			if (mapValue != null)
				mapField = mapValue.toString();

      out.write("\r\n");
      out.write("\t<input name='");
      out.print("hopmax_"+org.apache.manifoldcf.ui.util.Encoder.attributeEscape(relationshipType));
      out.write("' type=\"hidden\" value='");
      out.print(mapField);
      out.write("'/>\r\n");
      out.write("\t<input name=\"hopcountmode\" type=\"hidden\" value='");
      out.print(Integer.toString(hopcountMode));
      out.write("'/>\r\n");

		}
	    }
	}

	// Connection tab
	if (tabName.equals(Messages.getString(pageContext.getRequest().getLocale(),"editjob.Connection")) && tabSequenceInt == -1)
	{
		int rowCounter = 0;


      out.write("\r\n");
      out.write("\t\t  <table class=\"displaytable\">\r\n");
      out.write("\t\t\t<tr><td class=\"separator\" colspan=\"4\"><hr/></td></tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=\"1\" class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.PipelineColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"boxcell\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<table class=\"formtable\">\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"formheaderrow\">\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input name=\"pipeline_count\" type=\"hidden\" value=\"");
      out.print(pipelineConnectionNames.length);
      out.write("\"/>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.StageNumber"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.StageType"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.StagePrecedent"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.StageDescription"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.StageConnectionName"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"");
      out.print(((rowCounter++ % 2)==0)?"evenformrow":"oddformrow");
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">1.</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Repository"));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");

		if (connectionName.length() == 0)
		{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<select name=\"connectionname\" size=\"1\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option ");
      out.print("".equals(connectionName)?"selected=\"selected\"":"");
      out.write(" value=\"\">-- ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.NoneSelected"));
      out.write(" --</option>\r\n");

			for (IRepositoryConnection conn : connList)
			{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option ");
      out.print(conn.getName().equals(connectionName)?"selected=\"selected\"":"");
      out.write(" value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(conn.getName()));
      out.write('\'');
      out.write('>');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(conn.getName()));
      out.write("</option>\r\n");

			}

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t</select>\r\n");

		}
		else
		{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"connectionname\" value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(connectionName));
      out.write('\'');
      out.write('/');
      out.write('>');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(connectionName));
      out.write('\r');
      out.write('\n');

		}

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");

		// A map of stage number to reference count
		Map<Integer,Integer> referenceCounts = new HashMap<Integer,Integer>();
		// A list of precedents to pick from, displayed at the end
		List<Integer> precedents = new ArrayList<Integer>();
		// Repository connection is always allowed
		precedents.add(new Integer(-1));
		Set<String> alreadyPresent = new HashSet<String>();
		for (int j = 0; j < pipelineConnectionNames.length; j++)
		{
			if (pipelineIsOutputs[j])
				alreadyPresent.add(pipelineConnectionNames[j]);
			else
				precedents.add(new Integer(j));
			if (pipelinePrerequisites[j] != -1)
			{
				Integer thisOne = new Integer(pipelinePrerequisites[j]);
				Integer x = referenceCounts.get(thisOne);
				if (x == null)
					referenceCounts.put(thisOne,new Integer(1));
				else
					referenceCounts.put(thisOne,new Integer(x.intValue() + 1));
			}
		}
		boolean anyTransformationButtons = false;
		for (int j = 0; j < pipelineConnectionNames.length; j++)
		{
			String pipelineConnectionName = pipelineConnectionNames[j];
			String pipelineDescription = pipelineDescriptions[j];
			if (pipelineDescription == null)
				pipelineDescription = "";
			String pipelineType = pipelineIsOutputs[j]?Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Output"):Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Transformation");

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"");
      out.print(((rowCounter++ % 2)==0)?"evenformrow":"oddformrow");
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input name=\"pipeline_");
      out.print(j);
      out.write("_op\" type=\"hidden\" value=\"Continue\"/>\r\n");
      out.write("\t\t\t\t\t\t\t\t<a name=\"pipeline_");
      out.print(j);
      out.write("_tag\"/>\r\n");

			// We don't want to leave orphans around.  If the pipeline stage is an output, we can delete it ONLY if:
			// -- the precedent is -1, OR
			// -- the precedent is not -1 BUT more than one stage refers to the precedent
			if (!pipelineIsOutputs[j] || pipelinePrerequisites[j] == -1 || referenceCounts.get(new Integer(pipelinePrerequisites[j])).intValue() > 1)
			{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"button\" value=\"");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Delete"));
      out.write("\" alt='");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Deletepipelinestage"));
      out.write("' onclick=\"javascript:DeletePipelineStage(");
      out.print(j);
      out.write(");\"/>\r\n");

			}
			if (transformationList.length > 0)
			{
				anyTransformationButtons = true;

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"button\" value=\"");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.InsertTransformationBefore"));
      out.write("\" alt='");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Insertnewtransformationhere"));
      out.write("' onclick=\"javascript:InsertPipelineStageTransformation(");
      out.print(j);
      out.write(");\"/>\r\n");

			}
			if (outputList.length != alreadyPresent.size())
			{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"button\" value=\"");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.InsertOutputBefore"));
      out.write("\" alt='");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Insertnewoutputhere"));
      out.write("' onclick=\"javascript:InsertPipelineStageOutput(");
      out.print(j);
      out.write(");\"/>\r\n");

			}

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print((j+2));
      out.write(".</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print(pipelineType);
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<input name=\"pipeline_");
      out.print(j);
      out.write("_isoutput\" type=\"hidden\" value='");
      out.print(pipelineIsOutputs[j]?"true":"false");
      out.write("'/>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print((pipelinePrerequisites[j] + 2));
      out.write(".\r\n");
      out.write("\t\t\t\t\t\t\t\t<input name=\"pipeline_");
      out.print(j);
      out.write("_precedent\" type=\"hidden\" value=\"");
      out.print(pipelinePrerequisites[j]);
      out.write("\"/>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input name=\"pipeline_");
      out.print(j);
      out.write("_description\" type=\"text\" size=\"30\" value=\"");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(pipelineDescription));
      out.write("\"/>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<nobr>");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(pipelineConnectionName));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<input name=\"pipeline_");
      out.print(j);
      out.write("_connectionname\" type=\"hidden\" value=\"");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(pipelineConnectionName));
      out.write("\"/>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");

		}
		if (anyTransformationButtons)
		{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"formrow\"><td class=\"formseparator\" colspan=\"4\"><hr/></td></tr>\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"formrow\">\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<a name=\"transformation_tag\"/>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Transformation"));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input name=\"transformation_description\" type=\"text\" size=\"30\" value=\"\"/>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<select name=\"transformation_connectionname\" size=\"1\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option selected=\"selected\" value=\"\">-- ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.NoneSelected"));
      out.write(" --</option>\r\n");

			for (ITransformationConnection conn : transformationList)
			{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(conn.getName()));
      out.write('\'');
      out.write('>');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(conn.getName()));
      out.write("</option>\r\n");

			}

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");

		}
		if (outputList.length != alreadyPresent.size())
		{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"formrow\"><td class=\"formseparator\" colspan=\"4\"><hr/></td></tr>\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"formrow\">\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<a name=\"output_tag\"/>\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"button\" value='");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.AddOutput"));
      out.write("' alt='");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.AddAnOutput"));
      out.write("' onclick=\"javascript:AppendPipelineStageOutput();\"/>\r\n");
      out.write("\t\t\t\t\t\t\t\t<input name=\"output_op\" type=\"hidden\" value=\"Continue\"/>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Output"));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<select name=\"output_precedent\" size=\"1\">\r\n");

			for (Integer pre : precedents)
			{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"");
      out.print(pre);
      out.write('"');
      out.write('>');
      out.print((pre.intValue()+2));
      out.write("</option>\r\n");

			}

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input name=\"output_description\" type=\"text\" size=\"30\" value=\"\"/>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<select name=\"output_connectionname\" size=\"1\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option selected=\"selected\" value=\"\">-- ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.NoneSelected"));
      out.write(" --</option>\r\n");

			for (IOutputConnection conn : outputList)
			{
				if (!alreadyPresent.contains(conn.getName()))
				{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(conn.getName()));
      out.write('\'');
      out.write('>');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(conn.getName()));
      out.write("</option>\r\n");

				}
			}

      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");

		}

      out.write("\r\n");
      out.write("\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<tr><td class=\"separator\" colspan=\"4\"><hr/></td></tr>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.PriorityColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">\r\n");
      out.write("\t\t\t\t\t<select name=\"priority\" size=\"1\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"1\" ");
      out.print((priority==1)?"selected=\"selected\"":"");
      out.write('>');
      out.write('1');
      out.write(' ');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Highest"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"2\" ");
      out.print((priority==2)?"selected=\"selected\"":"");
      out.write(">2</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"3\" ");
      out.print((priority==3)?"selected=\"selected\"":"");
      out.write(">3</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"4\" ");
      out.print((priority==4)?"selected=\"selected\"":"");
      out.write(">4</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"5\" ");
      out.print((priority==5)?"selected=\"selected\"":"");
      out.write(">5</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"6\" ");
      out.print((priority==6)?"selected=\"selected\"":"");
      out.write(">6</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"7\" ");
      out.print((priority==7)?"selected=\"selected\"":"");
      out.write(">7</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"8\" ");
      out.print((priority==8)?"selected=\"selected\"":"");
      out.write(">8</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"9\" ");
      out.print((priority==9)?"selected=\"selected\"":"");
      out.write(">9</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"10\" ");
      out.print((priority==10)?"selected=\"selected\"":"");
      out.write(">10 ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Lowest"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.StartMethodColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">\r\n");
      out.write("\t\t\t\t\t<select name=\"startmethod\" size=\"1\">\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(IJobDescription.START_WINDOWBEGIN);
      out.write('\'');
      out.write(' ');
      out.print((startMethod==IJobDescription.START_WINDOWBEGIN)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.StartWhenScheduleWindowStarts"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(IJobDescription.START_WINDOWINSIDE);
      out.write('\'');
      out.write(' ');
      out.print((startMethod==IJobDescription.START_WINDOWINSIDE)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.StartEvenInsideAScheduleWindow"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(IJobDescription.START_DISABLE);
      out.write('\'');
      out.write(' ');
      out.print((startMethod==IJobDescription.START_DISABLE)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.DontAutomaticallyStartThisJob"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t  </table>\r\n");

	}
	else
	{

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"connectionname\" value='");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(connectionName));
      out.write("'/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"pipeline_count\" value=\"");
      out.print(pipelineConnectionNames.length);
      out.write("\"/>\r\n");

		for (int j = 0; j < pipelineConnectionNames.length; j++)
		{
			String pipelineConnectionName = pipelineConnectionNames[j];
			String pipelineDescription = pipelineDescriptions[j];
			if (pipelineDescription == null)
				pipelineDescription = "";

      out.write("\r\n");
      out.write("\t\t  <input name=\"pipeline_");
      out.print(j);
      out.write("_isoutput\" type=\"hidden\" value='");
      out.print(pipelineIsOutputs[j]?"true":"false");
      out.write("'/>\r\n");
      out.write("\t\t  <input name=\"pipeline_");
      out.print(j);
      out.write("_precedent\" type=\"hidden\" value=\"");
      out.print(pipelinePrerequisites[j]);
      out.write("\"/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"pipeline_");
      out.print(j);
      out.write("_connectionname\" value=\"");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(pipelineConnectionName));
      out.write("\"/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"pipeline_");
      out.print(j);
      out.write("_description\" value=\"");
      out.print(org.apache.manifoldcf.ui.util.Encoder.attributeEscape(pipelineDescription));
      out.write("\"/>\r\n");

		}

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"priority\" value='");
      out.print(priority);
      out.write("'/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"startmethod\" value='");
      out.print(startMethod);
      out.write("'/>\r\n");

	}

	// Scheduling tab
	if (tabName.equals(Messages.getString(pageContext.getRequest().getLocale(),"editjob.Scheduling")) && tabSequenceInt == -1)
	{

      out.write("\r\n");
      out.write("\t\t  <table class=\"displaytable\">\r\n");

	    if (model != -1 && model != IRepositoryConnector.MODEL_ADD_CHANGE_DELETE && model != IRepositoryConnector.MODEL_CHAINED_ADD_CHANGE_DELETE)
	    {

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\">\r\n");
      out.write("\t\t\t\t\t<nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.ScheduleTypeColon"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<select name=\"scheduletype\" size=\"1\">\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(IJobDescription.TYPE_CONTINUOUS);
      out.write('\'');
      out.write(' ');
      out.print((type==IJobDescription.TYPE_CONTINUOUS)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.RescanDocumentsDynamically"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(IJobDescription.TYPE_SPECIFIED);
      out.write('\'');
      out.write(' ');
      out.print((type==IJobDescription.TYPE_SPECIFIED)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.ScanEveryDocumentOnce"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\">\r\n");
      out.write("\t\t\t\t\t<nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.RecrawlIntervalIfContinuousColon"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<nobr><input type=\"text\" size=\"5\" name=\"recrawlinterval\" value='");
      out.print(((recrawlInterval==null)?"":recrawlInterval.toString()));
      out.write("'/> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.minutesBlankInfinity"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\">\r\n");
      out.write("\t\t\t\t\t<nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.MaxRecrawlIntervalIfContinuousColon"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<nobr><input type=\"text\" size=\"5\" name=\"maxrecrawlinterval\" value='");
      out.print(((maxRecrawlInterval==null)?"":maxRecrawlInterval.toString()));
      out.write("'/> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.minutesBlankInfinity"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\">\r\n");
      out.write("\t\t\t\t\t<nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.ExpirationIntervalIfContinuousColon"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<nobr><input type=\"text\" size=\"5\" name=\"expirationinterval\" value='");
      out.print(((expirationInterval==null)?"":expirationInterval.toString()));
      out.write("'/> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.minutesBlankInfinity"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\">\r\n");
      out.write("\t\t\t\t\t<nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.ReseedIntervalIfContinuousColon"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<nobr><input type=\"text\" size=\"5\" name=\"reseedinterval\" value='");
      out.print(((reseedInterval==null)?"":reseedInterval.toString()));
      out.write("'/> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.minutesBlankInfinity"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");

	    }
	    else
	    {

      out.write("\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"scheduletype\" value='");
      out.print(type);
      out.write("'/>\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"recrawlinterval\" value='");
      out.print(((recrawlInterval==null)?"":recrawlInterval.toString()));
      out.write("'/>\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"maxrecrawlinterval\" value='");
      out.print(((maxRecrawlInterval==null)?"":maxRecrawlInterval.toString()));
      out.write("'/>\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"reseedinterval\" value='");
      out.print(((reseedInterval==null)?"":reseedInterval.toString()));
      out.write("'/>\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"expirationinterval\" value='");
      out.print(((expirationInterval==null)?"":expirationInterval.toString()));
      out.write("'/>\r\n");

	    }

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");

	    if (scheduleRecords.size() == 0)
	    {

      out.write("\r\n");
      out.write("\t\t\t<tr><td class=\"message\" colspan=\"4\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.NoScheduleSpecified"));
      out.write("</td></tr>\r\n");

	    }
	    else
	    {
	      int l = 0;
	      while (l < scheduleRecords.size())
	      {
		ScheduleRecord sr = (ScheduleRecord)scheduleRecords.get(l);
		Long srDuration = sr.getDuration();
		EnumeratedValues srDayOfWeek = sr.getDayOfWeek();
		EnumeratedValues srMonthOfYear = sr.getMonthOfYear();
		EnumeratedValues srDayOfMonth = sr.getDayOfMonth();
		EnumeratedValues srYear = sr.getYear();
		EnumeratedValues srHourOfDay = sr.getHourOfDay();
		EnumeratedValues srMinutesOfHour = sr.getMinutesOfHour();
		boolean srRequestMinimum = sr.getRequestMinimum();
		String postFix = Integer.toString(l);
		int k;

		if (l > 0)
		{

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");

		}

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.ScheduledTimeColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td colspan=\"3\" class=\"value\">\r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name='");
      out.print("dayofweek"+postFix);
      out.write("' size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((srDayOfWeek==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.AnyDayOfWeek"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"0\" ");
      out.print((srDayOfWeek!=null&&srDayOfWeek.checkValue(0))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Sundays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"1\" ");
      out.print((srDayOfWeek!=null&&srDayOfWeek.checkValue(1))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Mondays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"2\" ");
      out.print((srDayOfWeek!=null&&srDayOfWeek.checkValue(2))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Tuesdays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"3\" ");
      out.print((srDayOfWeek!=null&&srDayOfWeek.checkValue(3))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Wednesdays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"4\" ");
      out.print((srDayOfWeek!=null&&srDayOfWeek.checkValue(4))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Thursdays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"5\" ");
      out.print((srDayOfWeek!=null&&srDayOfWeek.checkValue(5))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Fridays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"6\" ");
      out.print((srDayOfWeek!=null&&srDayOfWeek.checkValue(6))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Saturdays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    </select> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.at"));
      out.write(" \r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name='");
      out.print("hourofday"+postFix);
      out.write("' size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((srHourOfDay==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.MidnightAnyHourOfDay"));
      out.write("</option>\r\n");

					k = 0;
					while (k < 24)
					{
						int q = k;
						String ampm;
						if (k < 12)
							ampm = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.am");
						else
						{
							ampm = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.pm");
							q -= 12;
						}
						String hour;
						if (q == 0)
							q = 12;

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(k);
      out.write('\'');
      out.write(' ');
      out.print((srHourOfDay!=null&&srHourOfDay.checkValue(k))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Integer.toString(q)+" "+ampm);
      out.write("</option>\r\n");
						
						k++;
					}

      out.write("\r\n");
      out.write("\t\t\t\t    </select> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.plus"));
      out.write(" \r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name='");
      out.print("minutesofhour"+postFix);
      out.write("' size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((srMinutesOfHour==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Nothing"));
      out.write("</option>\r\n");

					k = 0;
					while (k < 60)
					{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(k);
      out.write('\'');
      out.write(' ');
      out.print((srMinutesOfHour!=null&&srMinutesOfHour.checkValue(k))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Integer.toString(k));
      out.write(' ');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.minutes"));
      out.write("</option>\r\n");

						k++;
					}

      out.write("\r\n");
      out.write("\t\t\t\t    </select> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.in"));
      out.write(" \r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name='");
      out.print("monthofyear"+postFix);
      out.write("' size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((srMonthOfYear==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.EveryMonthOfYear"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"0\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(0))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.January"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"1\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(1))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.February"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"2\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(2))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.March"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"3\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(3))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.April"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"4\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(4))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.May"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"5\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(5))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.June"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"6\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(6))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.July"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"7\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(7))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.August"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"8\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(8))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.September"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"9\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(9))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.October"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"10\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(10))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.November"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"11\" ");
      out.print((srMonthOfYear!=null&&srMonthOfYear.checkValue(11))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.December"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    </select> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.on"));
      out.write("\r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name='");
      out.print("dayofmonth"+postFix);
      out.write("' size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((srDayOfMonth==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.AnyDayOfMonth"));
      out.write("</option>\r\n");

					k = 0;
					while (k < 31)
					{
						int value = (k+1) % 10;
						String suffix;
						if (value == 1 && k != 10)
							suffix = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.st");
						else if (value == 2 && k != 11)
							suffix = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.nd");
						else if (value == 3 && k != 12)
							suffix = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.rd");
						else
							suffix = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.th");

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(Integer.toString(k));
      out.write('\'');
      out.write(' ');
      out.print((srDayOfMonth!=null&&srDayOfMonth.checkValue(k))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Integer.toString(k+1)+suffix+" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.dayofmonth"));
      out.write("</option>\r\n");

						k++;
					}

      out.write("\r\n");
      out.write("\t\t\t\t    </select><input type=\"hidden\" name='");
      out.print("year"+postFix);
      out.write("' value=\"none\"/>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.MaximumRunTimeColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" size=\"5\" name='");
      out.print("duration"+postFix);
      out.write("' value='");
      out.print(((srDuration==null)?"":new Long(srDuration.longValue()/60000L).toString()));
      out.write("'/> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.minutes"));
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.JobInvocationColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">\r\n");
      out.write("\t\t\t\t\t<select class=\"schedulepulldown\" multiple=\"false\" name='");
      out.print("invocation"+postFix);
      out.write("' size=\"2\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"complete\" ");
      out.print((srRequestMinimum==false)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Complete"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"minimal\" ");
      out.print(srRequestMinimum?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Minimal"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"message\" colspan=\"4\">\r\n");
      out.write("\t\t\t\t\t<a name='");
      out.print("remove_schedule_"+Integer.toString(l));
      out.write("'><input type=\"button\" value=\"");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.RemoveSchedule"));
      out.write("\" onClick='");
      out.print("Javascript:RemoveSchedule("+Integer.toString(l)+")");
      out.write("' alt='");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.RemoveScheduleRecord")+Integer.toString(l));
      out.write("'/></a>\r\n");
      out.write("\t\t\t\t\t<input type=\"hidden\" name='");
      out.print("recordop"+postFix);
      out.write("' value=\"\"/>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");

		l++;
	      }
	    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.ScheduledTimeColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td colspan=\"3\" class=\"value\">\r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name=\"dayofweek\" size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((dayOfWeek==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.AnyDayOfWeek"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"0\" ");
      out.print((dayOfWeek!=null&&dayOfWeek.checkValue(0))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Sundays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"1\" ");
      out.print((dayOfWeek!=null&&dayOfWeek.checkValue(1))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Mondays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"2\" ");
      out.print((dayOfWeek!=null&&dayOfWeek.checkValue(2))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Tuesdays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"3\" ");
      out.print((dayOfWeek!=null&&dayOfWeek.checkValue(3))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Wednesdays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"4\" ");
      out.print((dayOfWeek!=null&&dayOfWeek.checkValue(4))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Thursdays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"5\" ");
      out.print((dayOfWeek!=null&&dayOfWeek.checkValue(5))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Fridays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"6\" ");
      out.print((dayOfWeek!=null&&dayOfWeek.checkValue(6))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Saturdays"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    </select> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.at"));
      out.write(" \r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name=\"hourofday\" size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((hourOfDay==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.MidnightAnyHourOfDay"));
      out.write("</option>\r\n");

					int k = 0;
					while (k < 24)
					{
						int q = k;
						String ampm;
						if (k < 12)
							ampm = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.am");
						else
						{
							ampm = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.pm");
							q -= 12;
						}
						String hour;
						if (q == 0)
							q = 12;

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(k);
      out.write('\'');
      out.write(' ');
      out.print((hourOfDay!=null&&hourOfDay.checkValue(k))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Integer.toString(q)+" "+ampm);
      out.write("</option>\r\n");
						
						k++;
					}

      out.write("\r\n");
      out.write("\t\t\t\t    </select> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.plus"));
      out.write(" \r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name=\"minutesofhour\" size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((minutesOfHour==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Nothing"));
      out.write("</option>\r\n");

					k = 0;
					while (k < 60)
					{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(k);
      out.write('\'');
      out.write(' ');
      out.print((minutesOfHour!=null&&minutesOfHour.checkValue(k))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Integer.toString(k));
      out.write(' ');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.minutes"));
      out.write("</option>\r\n");

						k++;
					}

      out.write("\r\n");
      out.write("\t\t\t\t    </select> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.in"));
      out.write(" \r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name=\"monthofyear\" size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((monthOfYear==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.EveryMonthOfYear"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"0\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(0))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.January"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"1\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(1))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.February"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"2\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(2))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.March"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"3\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(3))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.April"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"4\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(4))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.May"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"5\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(5))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.June"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"6\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(6))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.July"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"7\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(7))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.August"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"8\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(8))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.September"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"9\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(9))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.October"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"10\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(10))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.November"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"11\" ");
      out.print((monthOfYear!=null&&monthOfYear.checkValue(11))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.December"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    </select> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.on"));
      out.write(" \r\n");
      out.write("\t\t\t\t    <select class=\"schedulepulldown\" multiple=\"true\" name=\"dayofmonth\" size=\"3\">\r\n");
      out.write("\t\t\t\t\t<option value=\"none\" ");
      out.print((dayOfMonth==null)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.AnyDayOfMonth"));
      out.write("</option>\r\n");

					k = 0;
					while (k < 31)
					{
						int value = (k+1) % 10;
						String suffix;
						if (value == 1 && k != 10)
							suffix = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.st");
						else if (value == 2 && k != 11)
							suffix = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.nd");
						else if (value == 3 && k != 12)
							suffix = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.rd");
						else
							suffix = Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.th");

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option value='");
      out.print(Integer.toString(k));
      out.write('\'');
      out.write(' ');
      out.print((dayOfMonth!=null&&dayOfMonth.checkValue(k))?"selected=\"selected\"":"");
      out.write('>');
      out.print(Integer.toString(k+1)+suffix+" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.dayofmonth"));
      out.write("</option>\r\n");

						k++;
					}

      out.write("\r\n");
      out.write("\t\t\t\t    </select><input type=\"hidden\" name=\"year\" value=\"none\"/>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.MaximumRunTimeColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" size=\"5\" name=\"duration\" value='");
      out.print(((duration==null)?"":duration.toString()));
      out.write("'/> ");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.minutes"));
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.JobInvocationColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">\r\n");
      out.write("\t\t\t\t\t<select class=\"schedulepulldown\" multiple=\"false\" name=\"invocation\" size=\"2\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"complete\" ");
      out.print((requestMinimum==false)?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Complete"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"minimal\" ");
      out.print(requestMinimum?"selected=\"selected\"":"");
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"editjob.Minimal"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"message\" colspan=\"4\">\r\n");
      out.write("\t\t\t\t\t<input type=\"hidden\" name=\"recordop\" value=\"\"/>\r\n");
      out.write("\t\t\t\t\t<a name=\"add_schedule\"><input type=\"button\" value=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.AddScheduledTime"));
      out.write("\" onClick=\"javascript:AddScheduledTime()\" alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.AddNewScheduleRecord"));
      out.write("\"/></a>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t  </table>\r\n");

	}
	else
	{

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"scheduletype\" value='");
      out.print(type);
      out.write("'/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"recrawlinterval\" value='");
      out.print(((recrawlInterval==null)?"":recrawlInterval.toString()));
      out.write("'/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"maxrecrawlinterval\" value='");
      out.print(((maxRecrawlInterval==null)?"":maxRecrawlInterval.toString()));
      out.write("'/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"reseedinterval\" value='");
      out.print(((reseedInterval==null)?"":reseedInterval.toString()));
      out.write("'/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"expirationinterval\" value='");
      out.print(((expirationInterval==null)?"":expirationInterval.toString()));
      out.write("'/>\r\n");


	      int l = 0;
	      while (l < scheduleRecords.size())
	      {
		ScheduleRecord sr = (ScheduleRecord)scheduleRecords.get(l);
		Long srDuration = sr.getDuration();
		EnumeratedValues srDayOfWeek = sr.getDayOfWeek();
		EnumeratedValues srMonthOfYear = sr.getMonthOfYear();
		EnumeratedValues srDayOfMonth = sr.getDayOfMonth();
		EnumeratedValues srYear = sr.getYear();
		EnumeratedValues srHourOfDay = sr.getHourOfDay();
		EnumeratedValues srMinutesOfHour = sr.getMinutesOfHour();
		boolean srRequestMinimum = sr.getRequestMinimum();
		String postFix = Integer.toString(l);

		if (srDayOfWeek == null)
		{

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("dayofweek"+postFix);
      out.write("' value=\"none\"/>\r\n");

		}
		else
		{
			Iterator iter = srDayOfWeek.getValues();
			while (iter.hasNext())
			{
				Integer value = (Integer)iter.next();

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("dayofweek"+postFix);
      out.write("' value='");
      out.print(value);
      out.write("'/>\r\n");

			}
		}

		if (srHourOfDay == null)
		{

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("hourofday"+postFix);
      out.write("' value=\"none\"/>\r\n");

		}
		else
		{
			Iterator iter = srHourOfDay.getValues();
			while (iter.hasNext())
			{
				Integer value = (Integer)iter.next();

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("hourofday"+postFix);
      out.write("' value='");
      out.print(value);
      out.write("'/>\r\n");

			}
		}

		if (srMinutesOfHour == null)
		{

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("minutesofhour"+postFix);
      out.write("' value=\"none\"/>\r\n");

		}
		else
		{
			Iterator iter = srMinutesOfHour.getValues();
			while (iter.hasNext())
			{
				Integer value = (Integer)iter.next();

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("minutesofhour"+postFix);
      out.write("' value='");
      out.print(value);
      out.write("'/>\r\n");

			}
		}

		if (srDayOfMonth == null)
		{

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("dayofmonth"+postFix);
      out.write("' value=\"none\"/>\r\n");

		}
		else
		{
			Iterator iter = srDayOfMonth.getValues();
			while (iter.hasNext())
			{
				Integer value = (Integer)iter.next();

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("dayofmonth"+postFix);
      out.write("' value='");
      out.print(value);
      out.write("'/>\r\n");

			}
		}

		if (srMonthOfYear == null)
		{

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("monthofyear"+postFix);
      out.write("' value=\"none\"/>\r\n");

		}
		else
		{
			Iterator iter = srMonthOfYear.getValues();
			while (iter.hasNext())
			{
				Integer value = (Integer)iter.next();

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("monthofyear"+postFix);
      out.write("' value='");
      out.print(value);
      out.write("'/>\r\n");

			}
		}

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("duration"+postFix);
      out.write("' value='");
      out.print(((srDuration==null)?"":new Long(srDuration.longValue()/60000L).toString()));
      out.write("'/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("invocation"+postFix);
      out.write("' value='");
      out.print(srRequestMinimum?"minimal":"complete");
      out.write("'/>\r\n");
      out.write("\t\t  <input type=\"hidden\" name='");
      out.print("year"+postFix);
      out.write("' value=\"none\"/>\r\n");

		l++;
	      }
	}

	if (connection != null)
	{
		IRepositoryConnector repositoryConnector = repositoryConnectorPool.grab(connection);
		if (repositoryConnector != null)
		{
			try
			{
				repositoryConnector.outputSpecificationBody(new org.apache.manifoldcf.ui.jsp.JspWrapper(out,adminprofile),pageContext.getRequest().getLocale(),documentSpecification,0,tabSequenceInt,tabName);
			}
			finally
			{
				repositoryConnectorPool.release(connection,repositoryConnector);
			}

      out.write("\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"connectionpresent\" value=\"true\"/>\r\n");

		}
	}
	
	boolean outputPresent = false;
	for (int j = 0; j < pipelineConnectionNames.length; j++)
	{
		if (pipelineIsOutputs[j])
		{
			outputPresent = true;
			IOutputConnection outputConnection = outputMgr.load(pipelineConnectionNames[j]);
			if (outputConnection != null)
			{
				IOutputConnector outputConnector = outputConnectorPool.grab(outputConnection);
				if (outputConnector != null)
				{
					try
					{
						outputConnector.outputSpecificationBody(new org.apache.manifoldcf.ui.jsp.JspWrapper(out,adminprofile),pageContext.getRequest().getLocale(),pipelineSpecifications[j],1+j,tabSequenceInt,tabName);
					}
					finally
					{
						outputConnectorPool.release(outputConnection,outputConnector);
					}
				}
			}
		}
		else
		{
			ITransformationConnection transformationConnection = transformationMgr.load(pipelineConnectionNames[j]);
			if (transformationConnection != null)
			{
				ITransformationConnector transformationConnector = transformationConnectorPool.grab(transformationConnection);
				if (transformationConnector != null)
				{
					try
					{
						transformationConnector.outputSpecificationBody(new org.apache.manifoldcf.ui.jsp.JspWrapper(out,adminprofile),pageContext.getRequest().getLocale(),pipelineSpecifications[j],1+j,tabSequenceInt,tabName);
					}
					finally
					{
						transformationConnectorPool.release(transformationConnection,transformationConnector);
					}
				}
			}
		}
	}


      out.write("\r\n");
      out.write("\t\t  <table class=\"displaytable\">\r\n");
      out.write("\t\t\t<tr><td class=\"separator\" colspan=\"4\"><hr/></td></tr>\r\n");
      out.write("\t\t\t<tr><td class=\"message\" colspan=\"4\"><nobr>\r\n");

	if (connectionName.length() > 0 && outputPresent)
	{

      out.write("\r\n");
      out.write("\t\t\t<input type=\"button\" value=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.Save"));
      out.write("\" onClick=\"javascript:Save()\" alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.SaveThisJob"));
      out.write("\"/>\r\n");

	}
	else
	{
		if (tabName.equals(Messages.getString(pageContext.getRequest().getLocale(),"editjob.Connection")) && tabSequenceInt == -1)
		{

      out.write("\r\n");
      out.write("\t\t\t<input type=\"button\" value=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.Continue"));
      out.write("\" onClick=\"javascript:Continue()\" alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.ContinueToNextScreen"));
      out.write("\"/>\r\n");

		}
	}

      out.write("\r\n");
      out.write("\t\t\t&nbsp;<input type=\"button\" value=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.cancel"));
      out.write("\" onClick=\"javascript:Cancel()\" alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"editjob.CancelJobEditing"));
      out.write("\"/>\r\n");
      out.write("\t\t\t</nobr></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t  </table>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t      </tr>\r\n");
      out.write("\t    </table>\r\n");
      out.write("\t</form>\r\n");

	}

      out.write("\r\n");
      out.write("       </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");

    }
    catch (ManifoldCFException e)
    {
	e.printStackTrace();
	variableContext.setParameter("text",e.getMessage());
	variableContext.setParameter("target","listjobs.jsp");

      out.write('\r');
      out.write('\n');
      out.write('	');
      if (true) {
        _jspx_page_context.forward("error.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

    }

      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
