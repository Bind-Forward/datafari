/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.40
 * Generated at: 2015-04-07 13:59:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.manifoldcf.core.interfaces.*;
import org.apache.manifoldcf.core.util.*;
import org.apache.manifoldcf.ui.i18n.*;
import org.apache.manifoldcf.agents.interfaces.*;
import org.apache.manifoldcf.crawler.interfaces.*;
import org.apache.manifoldcf.authorities.interfaces.*;
import java.util.*;

public final class viewjob_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/WEB-INF/jsp/x.tld", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/adminHeaders.jsp", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/WEB-INF/jsp/c.tld", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/WEB-INF/jsp/sql.tld", Long.valueOf(1428407612000L));
    _jspx_dependants.put("/WEB-INF/jsp/fmt.tld", Long.valueOf(1428407612000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 response.setHeader("Pragma","No-cache");
response.setDateHeader("Expires",0);
response.setHeader("Cache-Control", "no-cache");
response.setDateHeader("max-age", 0);
response.setContentType("text/html;charset=utf-8");

      out.write("\r\n");
      out.write("\r\n");


/* $Id: adminHeaders.jsp 1601529 2014-06-09 23:19:08Z kwright $ */

/**
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements. See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License. You may obtain a copy of the License at
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.manifoldcf.ui.beans.ThreadContext thread = null;
      thread = (org.apache.manifoldcf.ui.beans.ThreadContext) _jspx_page_context.getAttribute("thread", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (thread == null){
        thread = new org.apache.manifoldcf.ui.beans.ThreadContext();
        _jspx_page_context.setAttribute("thread", thread, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      org.apache.manifoldcf.ui.beans.AdminProfile adminprofile = null;
      synchronized (session) {
        adminprofile = (org.apache.manifoldcf.ui.beans.AdminProfile) _jspx_page_context.getAttribute("adminprofile", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (adminprofile == null){
          adminprofile = new org.apache.manifoldcf.ui.beans.AdminProfile();
          _jspx_page_context.setAttribute("adminprofile", adminprofile, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	if (adminprofile.getLoggedOn() == false)
	{
		response.sendRedirect("login.jsp");
		return;
	}

	IThreadContext threadContext = thread.getThreadContext();
	org.apache.manifoldcf.ui.multipart.MultipartWrapper variableContext = (org.apache.manifoldcf.ui.multipart.MultipartWrapper)threadContext.get("__WRAPPER__");
	if (variableContext == null)
	{
		variableContext = new org.apache.manifoldcf.ui.multipart.MultipartWrapper(request,adminprofile);
		threadContext.save("__WRAPPER__",variableContext);
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


/* $Id: viewjob.jsp 1620301 2014-08-25 12:13:35Z kwright $ */

/**
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements. See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License. You may obtain a copy of the License at
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

      out.write("\r\n");
      out.write("\r\n");
      out.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\r\n");
      out.write("\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("\t<link rel=\"StyleSheet\" href=\"style.css\" type=\"text/css\" media=\"screen\"/>\r\n");
      out.write("\t<title>\r\n");
      out.write("\t\t");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.ApacheManifoldCFViewJob"));
      out.write("\r\n");
      out.write("\t</title>\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t<!--\r\n");
      out.write("\r\n");
      out.write("\tfunction Delete(jobID)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (confirm(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"viewjob.DeleteJobConfirmation"));
      out.write("\"))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tdocument.viewjob.op.value=\"Delete\";\r\n");
      out.write("\t\t\tdocument.viewjob.jobid.value=jobID;\r\n");
      out.write("\t\t\tdocument.viewjob.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction StartOver(jobID)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (confirm(\"");
      out.print(Messages.getBodyJavascriptString(pageContext.getRequest().getLocale(),"viewjob.StartOverConfirmation"));
      out.write("\"))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tdocument.viewjob.op.value=\"StartOver\";\r\n");
      out.write("\t\t\tdocument.viewjob.jobid.value=jobID;\r\n");
      out.write("\t\t\tdocument.viewjob.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//-->\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body class=\"standardbody\">\r\n");
      out.write("\r\n");
      out.write("    <table class=\"page\">\r\n");
      out.write("      <tr><td colspan=\"2\" class=\"banner\">");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "banner.jsp", out, true);
      out.write("</td></tr>\r\n");
      out.write("      <tr><td class=\"navigation\">");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "navigation.jsp", out, true);
      out.write("</td>\r\n");
      out.write("       <td class=\"window\">\r\n");
      out.write("\t<p class=\"windowtitle\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.ViewAJob"));
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("\t<form class=\"standardform\" name=\"viewjob\" action=\"execute.jsp\" method=\"POST\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"op\" value=\"Continue\"/>\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"type\" value=\"job\"/>\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"jobid\" value=\"\"/>\r\n");
      out.write("\r\n");

    try
    {
	// Get the job manager handle
	IJobManager manager = JobManagerFactory.make(threadContext);
        IOutputConnectionManager outputManager = OutputConnectionManagerFactory.make(threadContext);
	IRepositoryConnectionManager connManager = RepositoryConnectionManagerFactory.make(threadContext);
	ITransformationConnectionManager transformationManager = TransformationConnectionManagerFactory.make(threadContext);

	IOutputConnectorPool outputConnectorPool = OutputConnectorPoolFactory.make(threadContext);
	IRepositoryConnectorPool repositoryConnectorPool = RepositoryConnectorPoolFactory.make(threadContext);
	ITransformationConnectorPool transformationConnectorPool = TransformationConnectorPoolFactory.make(threadContext);

	String jobID = variableContext.getParameter("jobid");
	IJobDescription job = manager.load(new Long(jobID));
	if (job == null)
	{
		throw new ManifoldCFException("No such job: "+jobID);
	}
	else
	{
		String naMessage = Messages.getString(pageContext.getRequest().getLocale(),"viewjob.Notapplicable");
		String jobType = "";
		String intervalString = naMessage;
		String maxIntervalString = naMessage;
		String reseedIntervalString = naMessage;
		String expirationIntervalString = naMessage;

		switch (job.getType())
		{
		case IJobDescription.TYPE_CONTINUOUS:
			String infinityMessage = Messages.getString(pageContext.getRequest().getLocale(),"viewjob.Infinity");
			String minutesMessage = Messages.getString(pageContext.getRequest().getLocale(),"viewjob.minutes");
			jobType = Messages.getString(pageContext.getRequest().getLocale(),"viewjob.Rescandocumentsdynamically");
			Long recrawlInterval = job.getInterval();
			Long maxRecrawlInterval = job.getMaxInterval();
			Long reseedInterval = job.getReseedInterval();
			Long expirationInterval = job.getExpiration();
			intervalString = (recrawlInterval==null)?infinityMessage:(new Long(recrawlInterval.longValue()/60000L).toString()+" "+minutesMessage);
			maxIntervalString = (maxRecrawlInterval==null)?infinityMessage:(new Long(maxRecrawlInterval.longValue()/60000L).toString()+" "+minutesMessage);
			reseedIntervalString = (reseedInterval==null)?infinityMessage:(new Long(reseedInterval.longValue()/60000L).toString()+" "+minutesMessage);
			expirationIntervalString = (expirationInterval==null)?infinityMessage:(new Long(expirationInterval.longValue()/60000L).toString()+" "+minutesMessage);
			break;
		case IJobDescription.TYPE_SPECIFIED:
			jobType = Messages.getString(pageContext.getRequest().getLocale(),"viewjob.Scaneverydocumentonce");
			break;
		default:
		}

		String startMethod = "";
		switch (job.getStartMethod())
		{
		case IJobDescription.START_WINDOWBEGIN:
			startMethod = Messages.getString(pageContext.getRequest().getLocale(),"viewjob.Startatbeginningofschedulewindow");
			break;
		case IJobDescription.START_WINDOWINSIDE:
			startMethod = Messages.getString(pageContext.getRequest().getLocale(),"viewjob.Startinsideschedulewindow");
			break;
		case IJobDescription.START_DISABLE:
			startMethod = Messages.getString(pageContext.getRequest().getLocale(),"viewjob.Dontautomaticallystart");
			break;
		default:
			break;
		}

		int priority = job.getPriority();

		String connectionName = job.getConnectionName();
		IRepositoryConnection connection = connManager.load(connectionName);
		
		int model = RepositoryConnectorFactory.getConnectorModel(threadContext,connection.getClassName());
		String[] relationshipTypes = RepositoryConnectorFactory.getRelationshipTypes(threadContext,connection.getClassName());
		Map hopCountFilters = job.getHopCountFilters();
		int hopcountMode = job.getHopcountMode();
		
		//threadContext.save("OutputSpecification",job.getOutputSpecification());
		//threadContext.save("OutputConnection",outputConnection);
		//threadContext.save("DocumentSpecification",job.getSpecification());
		//threadContext.save("RepositoryConnection",connection);
		int rowCounter = 0;


      out.write("\r\n");
      out.write("\t\t<table class=\"displaytable\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\" colspan=\"1\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.NameColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\" >");
      out.print("<!--jobid="+jobID+"-->");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(job.getDescription()));
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\" colspan=\"1\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.PipelineColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"boxcell\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<table class=\"formtable\">\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"formheaderrow\">\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.StageNumber"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.StageType"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.StagePrecedent"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.StageDescription"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumnheader\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.StageConnectionName"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"");
      out.print(((rowCounter++ % 2)==0)?"evenformrow":"oddformrow");
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">1.</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Repository"));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(connectionName));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");

		for (int j = 0; j < job.countPipelineStages(); j++)
		{

      out.write("\r\n");
      out.write("\t\t\t\t\t\t<tr class=\"");
      out.print(((rowCounter++ % 2)==0)?"evenformrow":"oddformrow");
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print((j+2));
      out.write(".</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print(job.getPipelineStageIsOutputConnection(j)?Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Output"):Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Transformation"));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print((job.getPipelineStagePrerequisite(j)+2));
      out.write(".</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print((job.getPipelineStageDescription(j)!=null)?org.apache.manifoldcf.ui.util.Encoder.bodyEscape(job.getPipelineStageDescription(j)):"");
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td class=\"formcolumncell\">");
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(job.getPipelineStageConnectionName(j)));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");

		}

      out.write("\r\n");
      out.write("\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.PriorityColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">");
      out.print(priority);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.StartMethodColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">");
      out.print(startMethod);
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");

		if (model != -1 && model != IRepositoryConnector.MODEL_ADD_CHANGE_DELETE)
		{

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.ScheduleTypeColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\"><nobr>");
      out.print(jobType);
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.MinimumRecrawlIntervalColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\"><nobr>");
      out.print(intervalString);
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.MaximumRecrawlIntervalColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\"><nobr>");
      out.print(maxIntervalString);
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.ExpirationIntervalColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\"><nobr>");
      out.print(expirationIntervalString);
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.ReseedIntervalColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\"><nobr>");
      out.print(reseedIntervalString);
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t</tr>\r\n");

		}

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\r\n");

		if (job.getScheduleRecordCount() == 0)
		{

      out.write("\r\n");
      out.write("\t\t\t<tr><td class=\"message\" colspan=\"4\">");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.NoScheduledRunTimes"));
      out.write("</td></tr>\r\n");

		}
		else
		{
			// Loop through the schedule records
			int j = 0;
			while (j < job.getScheduleRecordCount())
			{
				ScheduleRecord sr = job.getScheduleRecord(j);
				Long srDuration = sr.getDuration();
				boolean srRequestMinimum = sr.getRequestMinimum();
				EnumeratedValues srDayOfWeek = sr.getDayOfWeek();
				EnumeratedValues srMonthOfYear = sr.getMonthOfYear();
				EnumeratedValues srDayOfMonth = sr.getDayOfMonth();
				EnumeratedValues srYear = sr.getYear();
				EnumeratedValues srHourOfDay = sr.getHourOfDay();
				EnumeratedValues srMinutesOfHour = sr.getMinutesOfHour();

				if (j > 0)
				{

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");

				}

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\"><nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.ScheduledTimeColon"));
      out.write("</nobr></td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");

					if (srDayOfWeek == null)
						out.println(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Anydayoftheweek"));
					else
					{
						StringBuffer sb = new StringBuffer();
						boolean firstTime = true;
						if (srDayOfWeek.checkValue(0))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Sundays"));
						}
						if (srDayOfWeek.checkValue(1))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Mondays"));
						}
						if (srDayOfWeek.checkValue(2))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Tuesdays"));
						}
						if (srDayOfWeek.checkValue(3))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Wednesdays"));
						}
						if (srDayOfWeek.checkValue(4))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Thursdays"));
						}
						if (srDayOfWeek.checkValue(5))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Fridays"));
						}
						if (srDayOfWeek.checkValue(6))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Saturdays"));
						}
						out.println(sb.toString());
					}

      out.write('\r');
      out.write('\n');

					if (srHourOfDay == null)
					{
						if (srMinutesOfHour != null)
							out.println(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.oneveryhour")+" ");
						else
							out.println(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.atmidnight")+" ");
					}
					else
					{
						out.println(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.at")+" ");
						int k = 0;
						while (k < 24)
						{
							int q = k;
							String ampm;
							if (k < 12)
								ampm = Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.am");
							else
							{
								ampm = Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.pm");
								q -= 12;
							}
							String hour;
							if (q == 0)
								q = 12;
							if (srHourOfDay.checkValue(k))
								out.println(Integer.toString(q)+" "+ampm+" ");
							k++;
						}
					}

      out.write('\r');
      out.write('\n');

					if (srMinutesOfHour != null)
					{
						out.println(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.plus")+" ");
						int k = 0;
						while (k < 60)
						{
							if (srMinutesOfHour.checkValue(k))
								out.println(Integer.toString(k)+" ");
							k++;
						}
						out.println(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.minutes")+" ");
					}

      out.write('\r');
      out.write('\n');

					if (srMonthOfYear == null)
					{
						if (srDayOfMonth == null && srDayOfWeek == null && srHourOfDay == null && srMinutesOfHour == null)
							out.println(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.ineverymonthofyear"));
					}
					else
					{
						StringBuffer sb = new StringBuffer(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.in")+" ");
						boolean firstTime = true;
						if (srMonthOfYear.checkValue(0))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.January"));
						}
						if (srMonthOfYear.checkValue(1))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.February"));
						}
						if (srMonthOfYear.checkValue(2))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.March"));
						}
						if (srMonthOfYear.checkValue(3))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.April"));
						}
						if (srMonthOfYear.checkValue(4))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.May"));
						}
						if (srMonthOfYear.checkValue(5))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.June"));
						}
						if (srMonthOfYear.checkValue(6))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.July"));
						}
						if (srMonthOfYear.checkValue(7))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.August"));
						}
						if (srMonthOfYear.checkValue(8))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.September"));
						}
						if (srMonthOfYear.checkValue(9))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.October"));
						}
						if (srMonthOfYear.checkValue(10))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.November"));
						}
						if (srMonthOfYear.checkValue(11))
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.December"));
						}
						out.println(sb.toString());
					}

      out.write('\r');
      out.write('\n');

					if (srDayOfMonth == null)
					{
						if (srDayOfWeek == null && srHourOfDay == null && srMinutesOfHour == null)
							out.println(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.onanydayofthemonth"));
					}
					else
					{
						StringBuffer sb = new StringBuffer(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.onthe")+" ");
						int k = 0;
						boolean firstTime = true;
						while (k < 31)
						{
							if (srDayOfMonth.checkValue(k))
							{
								if (firstTime)
									firstTime = false;
								else
									sb.append(",");
								sb.append(Integer.toString(k+1));
								int value = (k+1) % 10;
								if (value == 1 && k != 10)
									sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.st"));
								else if (value == 2 && k != 11)
									sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.nd"));
								else if (value == 3 && k != 12)
									sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.rd"));
								else
									sb.append(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.th"));
							}
							k++;
						}
						sb.append(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.ofthemonth"));
						out.println(sb.toString());
					}

      out.write('\r');
      out.write('\n');

					if (srYear != null)
					{
						StringBuffer sb = new StringBuffer(" "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.inyears")+" ");
						Iterator iter = srYear.getValues();
						boolean firstTime = true;
						while (iter.hasNext())
						{
							if (firstTime)
								firstTime = false;
							else
								sb.append(",");
							Integer value = (Integer)iter.next();
							sb.append(value.toString());
						}
						out.println(sb.toString());
					}

      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\">\r\n");
      out.write("\t\t\t\t\t");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.MaximumRunTimeColon"));
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">\r\n");

					if (srDuration == null)
						out.println(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Nolimit"));
					else
						out.println(new Long(srDuration.longValue()/60000L).toString() + " "+Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.minutes"));

      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"description\">\r\n");
      out.write("\t\t\t\t\t");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.JobInvocationColon"));
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\">\r\n");

					if (srRequestMinimum)
						out.println(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Minimal"));
					else
						out.println(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Complete"));

      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");

				j++;
			}
		}
		
		if (relationshipTypes != null && relationshipTypes.length > 0)
		{

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");

			int k = 0;
			while (k < relationshipTypes.length)
			{
				String relationshipType = relationshipTypes[k++];
				Long value = (Long)hopCountFilters.get(relationshipType);

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\" colspan=\"1\">\r\n");
      out.write("\t\t\t\t\t<nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.MaximumHopCountForLinkType"));
      out.write(' ');
      out.write('\'');
      out.print(org.apache.manifoldcf.ui.util.Encoder.bodyEscape(relationshipType));
      out.write("':</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t");
      out.print(((value==null)?Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Unlimited"):value.toString()));
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t\r\n");

			}

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"description\" colspan=\"1\">\r\n");
      out.write("\t\t\t\t\t<nobr>");
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.HopCountModeColon"));
      out.write("</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td class=\"value\" colspan=\"3\">\r\n");
      out.write("\t\t\t\t\t<nobr>\r\n");
      out.write("\t\t\t\t\t\t");
      out.print((hopcountMode==IJobDescription.HOPCOUNT_ACCURATE)?Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Deleteunreachabledocuments"):"");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");
      out.print((hopcountMode==IJobDescription.HOPCOUNT_NODELETE)?Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Nodeletesfornow"):"");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");
      out.print((hopcountMode==IJobDescription.HOPCOUNT_NEVERDELETE)?Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Nodeletesforever"):"");
      out.write("\r\n");
      out.write("\t\t\t\t\t</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");


		}

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"message\" colspan=\"4\">1.</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=\"4\">\r\n");

		if (connection != null)
		{
			IRepositoryConnector repositoryConnector = repositoryConnectorPool.grab(connection);
			if (repositoryConnector != null)
			{
				try
				{
					repositoryConnector.viewSpecification(new org.apache.manifoldcf.ui.jsp.JspWrapper(out,adminprofile),pageContext.getRequest().getLocale(),job.getSpecification(),0);
				}
				finally
				{
					repositoryConnectorPool.release(connection,repositoryConnector);
				}
			}
		}

      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");

		for (int j = 0; j < job.countPipelineStages(); j++)
		{

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"message\" colspan=\"4\">");
      out.print((j+2));
      out.write(".</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=\"4\">\r\n");

			Specification os = job.getPipelineStageSpecification(j);
			if (job.getPipelineStageIsOutputConnection(j))
			{
				IOutputConnection thisConnection = outputManager.load(job.getPipelineStageConnectionName(j));
				IOutputConnector outputConnector = outputConnectorPool.grab(thisConnection);
				if (outputConnector != null)
				{
					try
					{
						outputConnector.viewSpecification(new org.apache.manifoldcf.ui.jsp.JspWrapper(out,adminprofile),pageContext.getRequest().getLocale(),os,1+j);
					}
					finally
					{
						outputConnectorPool.release(thisConnection,outputConnector);
					}
				}
			}
			else
			{
				ITransformationConnection thisConnection = transformationManager.load(job.getPipelineStageConnectionName(j));
				ITransformationConnector transformationConnector = transformationConnectorPool.grab(thisConnection);
				if (transformationConnector != null)
				{
					try
					{
						transformationConnector.viewSpecification(new org.apache.manifoldcf.ui.jsp.JspWrapper(out,adminprofile),pageContext.getRequest().getLocale(),os,1+j);
					}
					finally
					{
						transformationConnectorPool.release(thisConnection,transformationConnector);
					}
				}
			}

      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");

		}

      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"separator\" colspan=\"4\"><hr/></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"message\" colspan=\"4\">\r\n");
      out.write("\t\t\t\t\t<nobr>\r\n");
      out.write("\t\t\t\t\t\t<a href='");
      out.print("editjob.jsp?jobid="+jobID);
      out.write("' alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"viewjob.EditThisJob"));
      out.write('"');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Edit"));
      out.write("</a>\r\n");
      out.write("\t\t\t\t\t\t<a href='");
      out.print("javascript:Delete(\""+jobID+"\")");
      out.write("' alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"viewjob.DeleteThisJob"));
      out.write('"');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Delete"));
      out.write("</a>\r\n");
      out.write("\t\t\t\t\t\t<a href='");
      out.print("editjob.jsp?origjobid="+jobID);
      out.write("' alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"viewjob.CopyThisJob"));
      out.write('"');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.Copy"));
      out.write("</a>\r\n");
      out.write("\t\t\t\t\t\t<a href='");
      out.print("javascript:StartOver(\""+jobID+"\")");
      out.write("' alt=\"");
      out.print(Messages.getAttributeString(pageContext.getRequest().getLocale(),"viewjob.ResetSeedingThisJob"));
      out.write('"');
      out.write('>');
      out.print(Messages.getBodyString(pageContext.getRequest().getLocale(),"viewjob.ResetSeeding"));
      out.write("</a>\r\n");
      out.write("\t\t\t\t\t</nobr>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\r\n");

	}
    }
    catch (ManifoldCFException e)
    {
	e.printStackTrace();
	variableContext.setParameter("text",e.getMessage());
	variableContext.setParameter("target","listjobs.jsp");

      out.write('\r');
      out.write('\n');
      out.write('	');
      if (true) {
        _jspx_page_context.forward("error.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

    }

      out.write("\r\n");
      out.write("\t    </form>\r\n");
      out.write("       </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
