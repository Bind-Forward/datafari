<?xml version="1.0" encoding="ISO-8859-1" ?>
<project name="Datafari_Debian7" default="clean-build" basedir=".">

	<!-- ========================= PROPERTIES ============================= -->

	<property name="mcf.password" value="password" />
	<property name="datafari.password" value="password" />
	<property name="datafari.context.app" value="Datafari" />

	<!-- If project.dir not set, set it as basedir (datafari directory) -->
	<condition property="project.dir" else="${basedir}/..">
		<isset property="project.dir" />
	</condition>

	<!-- Source directories -->
	<property name="elk.src.dir" value="${project.dir}/elk" />
	<property name="datafari.elk.dir" value="${project.dir}/datafari-elk" />
	<property name="tomcat.src.dir" value="${project.dir}/tomcat" />
	<property name="solr.src.dir" value="${project.dir}/solr" />
	<property name="mcf.src.dir" value="${project.dir}/mcf" />
	<property name="cassandra.src.dir" value="${project.dir}/cassandra" />
	<property name="dist.src.dir" value="${project.dir}/dist" />
	<property name="bin.src.dir" value="${project.dir}/bin" />
	<property name="devtools.src.dir" value="${project.dir}/dev-tools" />

	<!-- Output directories and self contained Datafari's Debian components -->
	<property name="debian.dir" value="${project.dir}/debian7" />
	<property name="debian.dist.dir" value="${debian.dir}/dist" />
	<property name="debian.bin.dir" value="${debian.dir}/bin" />

	<property name="jvm.dir" value="${debian.dir}/jvm" />
	<property name="zookeeper.dir" value="${debian.dir}/zookeeper" />
	<property name="command.dir" value="${debian.dir}/command" />
	<property name="ocr.dir" value="${debian.dir}/ocr" />
	<property name="pgsql.dir" value="${debian.dir}/pgsql" />

	<!-- Installer directories -->
	<property name="installer.dir" value="${debian.dir}/installer" />
	<property name="installer.build.dir" value="${installer.dir}/build" />
	<!-- Debian installer direcotry -->
	<property name="installer.dist.dir" value="${installer.dir}/dist" />

	<target name="clean-build" depends="clean,buildInstaller" />

	<target name="clean">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${installer.dist.dir}" />
		</delete>
	</target>

	<target name="buildInstaller" depends="configure">

		<echoproperties />

		<copy todir="${installer.build.dir}/datafari/opt/datafari">
			<fileset dir="${debian.dist.dir}" />
		</copy>
		<copy todir="${installer.build.dir}/datafari/DEBIAN">
			<fileset dir="${installer.dir}/DEBIAN" />
		</copy>
		<exec executable="chmod">
			<arg value="-R" />
			<arg value="755" />
			<arg value="${installer.build.dir}/datafari/DEBIAN" />
		</exec>
		<exec executable="dpkg-deb">
			<arg value="-b" />
			<arg value="${installer.build.dir}/datafari" />
		</exec>

		<!-- Output file -->
		<move file="${installer.build.dir}/datafari.deb" todir="${installer.dist.dir}" />

		<!-- Clean-up the installer intermediate directory -->
		<delete dir="${installer.build.dir}" />
		
		<!-- Clean-up the dist intermediate directory -->
		<delete dir="${debian.dist.dir}" />
	</target>

	<target name="configure" depends="copyBinaries">
		<replace file="${debian.dist.dir}/tomcat/conf/tomcat-users.xml" token="@PASSWORD@" value="${datafari.password}" />
		<replace file="${debian.dist.dir}/mcf/mcf_home/properties.xml" token="@PASSWORD@" value="${mcf.password}" />
	</target>

	<target name="copyBinaries">

		<mkdir dir="${debian.dist.dir}/logs" />
		<mkdir dir="${debian.dist.dir}/pid" />

		<!-- These components need a build with Maven -->

		<!-- Copy Tomcat admin UI and external webapps like ManifoldCF -->
		<copy todir="${debian.dist.dir}/tomcat">
			<fileset dir="${tomcat.src.dir}">
				<!-- Exclude already deployed (d/D)atafari app, if present -->
				<exclude name="**/*atafari/**" />
			</fileset>
		</copy>

		<copy todir="${debian.dist.dir}/solr">
			<fileset dir="${solr.src.dir}">
				<!-- Exclude already existing data (i.e. coming from dev environment) -->
				<exclude name="**/data/**" />
			</fileset>
		</copy>
		
		<copy todir="${debian.dist.dir}/elk">
			<fileset dir="${elk.src.dir}">
				<!-- Exclude already existing data & logs (i.e. coming from dev environment) -->
				<exclude name="elasticsearch/data/**" />
				<exclude name="**/logs/**" />
			</fileset>
		</copy>
		
		<!-- Copy default configuration files for ELK to avoid custom ones -->
		<copy toDir="${debian.dist.dir}/elk/logstash" overwrite="true" force="true">
			<fileset dir="${datafari.elk.dir}/logstash" />
		</copy>
		<copy toDir="${debian.dist.dir}/elk/scripts" overwrite="true" force="true">
			<fileset dir="${datafari.elk.dir}/scripts" />
		</copy>
		<copy toDir="${debian.dist.dir}/elk/elasticsearch/config" overwrite="true" force="true">
			<fileset dir="${datafari.elk.dir}/elasticsearch/config" />
		</copy>
		<copy toDir="${debian.dist.dir}/elk/kibana/config" overwrite="true" force="true">
			<fileset dir="${datafari.elk.dir}/kibana/config" />
		</copy>

		<copy todir="${debian.dist.dir}/mcf">
			<fileset dir="${mcf.src.dir}" />
		</copy>

		<copy todir="${debian.dist.dir}/cassandra">
			<fileset dir="${cassandra.src.dir}" />
		</copy>

		<!-- Copy Datafari web application sources -->
		<copy todir="${debian.dist.dir}/tomcat/webapps/${datafari.context.app}">
			<fileset dir="${dist.src.dir}" />
		</copy>

		<copy todir="${debian.dist.dir}/bin">
			<fileset dir="${bin.src.dir}" />
		</copy>

		<copy todir="${debian.dist.dir}/bin/common">
			<fileset dir="${devtools.src.dir}/script/mcf-conf">
				<include name="*.jar" />
			</fileset>
		</copy>

		<!-- Self-contained Debian components -->

		<copy todir="${debian.dist.dir}/ocr">
			<fileset dir="${ocr.dir}" />
		</copy>

		<copy todir="${debian.dist.dir}/pgsql">
			<fileset dir="${pgsql.dir}" />
		</copy>

		<copy todir="${debian.dist.dir}/jvm">
			<fileset dir="${jvm.dir}" />
		</copy>

		<copy todir="${debian.dist.dir}/zookeeper">
			<fileset dir="${zookeeper.dir}" />
		</copy>


		<copy todir="${debian.dist.dir}/command">
			<fileset dir="${command.dir}" />
		</copy>


		<copy todir="${debian.dist.dir}/bin">
			<fileset dir="${debian.bin.dir}" />
		</copy>

		<copy file="${project.dir}/LICENSE.txt" todir="${debian.dist.dir}/" />
		<copy file="${project.dir}/README.txt" todir="${debian.dist.dir}/" />
		<copy file="${project.dir}/CHANGES.txt" todir="${debian.dist.dir}/" />
	</target>

</project>
